"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[221],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return r?n.createElement(h,a(a({ref:t},u),{},{components:r})):n.createElement(h,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9433:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const s={},a="NodeCache Constructor Test",i={unversionedId:"Modules/Util/NodeUtils/NodeCache Tests/constructor_test",id:"Modules/Util/NodeUtils/NodeCache Tests/constructor_test",title:"NodeCache Constructor Test",description:"Failure cases for the constructor are exercised by tests of member methods/functions.",source:"@site/docs/Modules/Util/NodeUtils/NodeCache Tests/constructor_test.md",sourceDirName:"Modules/Util/NodeUtils/NodeCache Tests",slug:"/Modules/Util/NodeUtils/NodeCache Tests/constructor_test",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/NodeCache Tests/constructor_test",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Util/NodeUtils/NodeCache Tests/constructor_test.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BifrostConnection.getUrl Tests",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/BifrostConnection Tests/getUrl_test"},next:{title:"getGenesisBlock Tests",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/NodeCache Tests/getgenesisblock_test"}},l={},c=[{value:"Happy Path",id:"happy-path",level:5}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nodecache-constructor-test"},"NodeCache Constructor Test"),(0,o.kt)("p",null,"Failure cases for the constructor are exercised by tests of member methods/functions."),(0,o.kt)("p",null,"The following testing scenarios are required:"),(0,o.kt)("h5",{id:"happy-path"},"Happy Path"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Given")," that there is an object ",(0,o.kt)("inlineCode",{parentName:"li"},"mockBifrost")," that mocks ",(0,o.kt)("inlineCode",{parentName:"li"},"BifrostQuery.getNodeCache"),"\nand ",(0,o.kt)("inlineCode",{parentName:"li"},"BifrostQuery.getGenesisBlock(1)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"And")," there exists a valid ",(0,o.kt)("inlineCode",{parentName:"li"},"BifrostConnection")," object that is the value of the variable ",(0,o.kt)("inlineCode",{parentName:"li"},"connection")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"When"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"NodeCache(connection, 2000)\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Then")," the constructor returns without error"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"And")," calls are made to the mocked ",(0,o.kt)("inlineCode",{parentName:"li"},"BifrostQuery.getNodeCache")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"BifrostQuery.getGenesisBlock(1)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"If")," The implementation is supposed to make the calls synchronously, then the calls must happen before the\nconstructor returns."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Otherwise"),", the calls to the mocked methods/functions must have happened within an implementation defined\namount of time from the constructor returning.")))))}p.isMDXComponent=!0}}]);