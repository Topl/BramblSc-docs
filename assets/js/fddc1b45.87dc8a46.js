"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[892],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>m});var i=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=i.createContext({}),d=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=d(n.components);return i.createElement(l.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},u=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,l=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return t?i.createElement(h,s(s({ref:e},p),{},{components:t})):i.createElement(h,s({ref:e},p))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o.mdxType="string"==typeof n?n:a,s[1]=o;for(var d=2;d<r;d++)s[d]=t[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4608:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={},s="Validate a Proven Transaction",o={unversionedId:"Modules/Wallet/Credentialler/Validate",id:"Modules/Wallet/Credentialler/Validate",title:"Validate a Proven Transaction",description:"TODO: Link to models",source:"@site/docs/Modules/Wallet/Credentialler/Validate.md",sourceDirName:"Modules/Wallet/Credentialler",slug:"/Modules/Wallet/Credentialler/Validate",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/Validate",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Wallet/Credentialler/Validate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Prove Then Validate a Transaction",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/ProveAndValidate"},next:{title:"Overview",permalink:"/sdk-spec/docs/Overview/"}},l={},d=[{value:"Signature(s)",id:"signatures",level:2},{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Testing Procedure",id:"testing-procedure",level:2},{value:"Test Cases",id:"test-cases",level:3},{value:"Transaction Input with Attestation Type Image32/64",id:"transaction-input-with-attestation-type-image3264",level:4},{value:"Transaction Input with Attestation Type Commitment32/64",id:"transaction-input-with-attestation-type-commitment3264",level:4},{value:"Transaction Input with Proofs Whose TransactionBind Does Not Match the Context SignableBytes",id:"transaction-input-with-proofs-whose-transactionbind-does-not-match-the-context-signablebytes",level:4},{value:"Transaction Input with Attestation Type Predicate Whose Threshold is Unobtainable",id:"transaction-input-with-attestation-type-predicate-whose-threshold-is-unobtainable",level:4},{value:"Transaction Input with Attestation Type Predicate And Locked Challenge",id:"transaction-input-with-attestation-type-predicate-and-locked-challenge",level:4},{value:"Transaction Input with Attestation Type Predicate And None-Proofs",id:"transaction-input-with-attestation-type-predicate-and-none-proofs",level:4},{value:"Transaction Input with Attestation Type Predicate And DigitalSignature But Signature Verifier not in Context",id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-but-signature-verifier-not-in-context",level:4},{value:"Transaction Input with Attestation Type Predicate And DigitalSignature With Invalid Proof",id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-with-invalid-proof",level:4},{value:"Transaction Input with Attestation Type Predicate And DigitalSignature With Valid Proof",id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-with-valid-proof",level:4},{value:"Transaction Input with Attestation Type Predicate And Digest But Digest Verifier not in Context",id:"transaction-input-with-attestation-type-predicate-and-digest-but-digest-verifier-not-in-context",level:4},{value:"Transaction Input with Attestation Type Predicate And Digest With Invalid Proof",id:"transaction-input-with-attestation-type-predicate-and-digest-with-invalid-proof",level:4},{value:"Transaction Input with Attestation Type Predicate And Digest With Valid Proof",id:"transaction-input-with-attestation-type-predicate-and-digest-with-valid-proof",level:4},{value:"Transaction Input with Attestation Type Predicate And HeightRange But Height not in Context Datums",id:"transaction-input-with-attestation-type-predicate-and-heightrange-but-height-not-in-context-datums",level:4},{value:"Transaction Input with Attestation Type Predicate And HeightRange But not Satisfied",id:"transaction-input-with-attestation-type-predicate-and-heightrange-but-not-satisfied",level:4},{value:"Transaction Input with Attestation Type Predicate And HeightRange Satisfied",id:"transaction-input-with-attestation-type-predicate-and-heightrange-satisfied",level:4},{value:"Transaction Input with Attestation Type Predicate And TickRange But not Satisfied",id:"transaction-input-with-attestation-type-predicate-and-tickrange-but-not-satisfied",level:4},{value:"Transaction Input with Attestation Type Predicate And TickRange Satisfied",id:"transaction-input-with-attestation-type-predicate-and-tickrange-satisfied",level:4},{value:"Test Vectors",id:"test-vectors",level:3}],p={toc:d};function c(n){let{components:e,...r}=n;return(0,a.kt)("wrapper",(0,i.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validate-a-proven-transaction"},"Validate a Proven Transaction"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"TODO: Link to models")),(0,a.kt)("h2",{id:"signatures"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext): List[CredentiallerError]\n")),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Validate if an IoTransaction is satisfactorily proven. An IoTransaction is satisfactorily proven if the attestations of all inputs have their threshold met."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"TODO: Add diagram")),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tx"),(0,a.kt)("br",{parentName:"li"}),"The transaction to validate.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: IoTransaction"),(0,a.kt)("li",{parentName:"ul"},"Required"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx"),(0,a.kt)("br",{parentName:"li"}),"The context in which to validate the transaction.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: DynamicContext"),(0,a.kt)("li",{parentName:"ul"},"Required")))),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,"List[",(0,a.kt)("a",{parentName:"p",href:"/sdk-spec/docs/Modules/Common/Models/Errors#credentiallererror"},"CredentiallerError")),(0,a.kt)("p",null,"The list of validation errors that occured, if any."),(0,a.kt)("h2",{id:"testing-procedure"},"Testing Procedure"),(0,a.kt)("h3",{id:"test-cases"},"Test Cases"),(0,a.kt)("p",null,"The following test cases only consider a transaction of 3 : a : A => 3 : a : B. That is, a single input to single output transaction where the quantity and asset type do not change but the Address does."),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-image3264"},"Transaction Input with Attestation Type Image32/64"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(4893).Z,width:"2609",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation type ",(0,a.kt)("inlineCode",{parentName:"li"},"Image32")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"Image64")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is an arbitrary DynamicContext"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nTBD")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Image32/64",\n  "inputs": {\n    "tx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {"leaves": [], "threshold": 0},\n            "known": [],\n            "responses": []\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "xxxx",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": "TBD"\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-commitment3264"},"Transaction Input with Attestation Type Commitment32/64"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(3047).Z,width:"2597",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation type ",(0,a.kt)("inlineCode",{parentName:"li"},"Commitment32")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"Commitment64")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is an arbitrary DynamicContext"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nTBD")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Commitment32/64",\n  "inputs": {\n    "tx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {"root": "", "threshold": 0},\n            "known": [],\n            "responses": []\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "xxxx",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": "TBD"\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-proofs-whose-transactionbind-does-not-match-the-context-signablebytes"},"Transaction Input with Proofs Whose TransactionBind Does Not Match the Context SignableBytes"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(2414).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation with proofs that are bound to ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext containing arbitrary ",(0,a.kt)("inlineCode",{parentName:"li"},"signableBytes")," unrelated to ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Proofs Whose TransactionBind Does Not Match the Context SignableBytes",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                {"tickRange": {"min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"locked": {}},\n              {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}},\n              {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}},\n              {"heightRange": {"transactionBind": "txBind"}},\n              {"tickRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "wrong signable bytes",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-whose-threshold-is-unobtainable"},"Transaction Input with Attestation Type Predicate Whose Threshold is Unobtainable"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(6710).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"challenges")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," having length 5"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 6"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is an arbitrary DynamicContext"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate Whose Threshold is Unobtainable",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                {"tickRange": {"min": 2, "max": 15}}\n              ], \n              "threshold": 6\n            },\n            "responses": [\n              {"locked": {}},\n              {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}},\n              {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}},\n              {"heightRange": {"transactionBind": "txBind"}},\n              {"tickRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-locked-challenge"},"Transaction Input with Attestation Type Predicate And Locked Challenge"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(8248).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with only a locked proposition in the ",(0,a.kt)("inlineCode",{parentName:"li"},"challenges")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," A locked proof in the ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is an arbitrary DynamicContext"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And Locked Challenge",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"locked": {}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-none-proofs"},"Transaction Input with Attestation Type Predicate And None-Proofs"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(202).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with 5 propositions in ",(0,a.kt)("inlineCode",{parentName:"li"},"challenges")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains 5 ",(0,a.kt)("inlineCode",{parentName:"li"},"None")," values"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is an arbitrary DynamicContext"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And None-Proofs",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                {"tickRange": {"min": 2, "max": 15}}\n              ], \n              "threshold": 6\n            },\n            "responses": [\n              null,\n              null,\n              null,\n              null,\n              null\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-but-signature-verifier-not-in-context"},"Transaction Input with Attestation Type Predicate And DigitalSignature But Signature Verifier not in Context"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(9315).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a DigitalSignature proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' DigitalSignature proposition uses routine "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a DigitalSignature proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"signingRoutines")," does ",(0,a.kt)("em",{parentName:"li"},"not"),' contain "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And DigitalSignature But Signature Verifier not in Context",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"random": {"verify": "arbitrary verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-with-invalid-proof"},"Transaction Input with Attestation Type Predicate And DigitalSignature With Invalid Proof"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(4e3).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a DigitalSignature proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' DigitalSignature proposition uses routine "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a DigitalSignature proof that was created with a different key than the proposition"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"signingRoutines"),' contains "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And DigitalSignature With Invalid Proof",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"signature": {"transactionBind": "txBind", "witness": "witness_abc"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digitalsignature-with-valid-proof"},"Transaction Input with Attestation Type Predicate And DigitalSignature With Valid Proof"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(9127).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a DigitalSignature proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' DigitalSignature proposition uses routine "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a DigitalSignature proof that was created with the same key as the proposition"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"signingRoutines"),' contains "ed25519"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nThe transaction is valid thus an empty list is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And DigitalSignature With Valid Proof",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": []\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digest-but-digest-verifier-not-in-context"},"Transaction Input with Attestation Type Predicate And Digest But Digest Verifier not in Context"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(2361).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a Digest proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' Digest proposition uses routine "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a Digest proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"hashingRoutines")," does ",(0,a.kt)("em",{parentName:"li"},"not"),' contain "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And Digest But Digest Verifier not in Context",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"random": {"verify": "arbitrary verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digest-with-invalid-proof"},"Transaction Input with Attestation Type Predicate And Digest With Invalid Proof"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(5087).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a Digest proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' Digest proposition uses routine "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a Digest proof that contains a preimage that does ",(0,a.kt)("em",{parentName:"li"},"not")," match the proposition"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"hashingRoutines"),' contains "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And Digest With Invalid Proof",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"digest": {"transactionBind": "txBind", "preimage": "preimage_abc"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-digest-with-valid-proof"},"Transaction Input with Attestation Type Predicate And Digest With Valid Proof"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(8498).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a Digest proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' Digest proposition uses routine "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a Digest proof that contains the correct preimage"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"hashingRoutines"),' contains "blake2b256"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nThe transaction is valid thus an empty list is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And Digest With Valid Proof",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": []\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-heightrange-but-height-not-in-context-datums"},"Transaction Input with Attestation Type Predicate And HeightRange But Height not in Context Datums"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(1670).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a HeightRange proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' HeightRange proposition uses chain "header"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a HeightRange proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"datums")," does ",(0,a.kt)("em",{parentName:"li"},"not"),' contains an entry for the chain "header"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And HeightRange But Height not in Context Datums",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"heightRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"era": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-heightrange-but-not-satisfied"},"Transaction Input with Attestation Type Predicate And HeightRange But not Satisfied"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(1739).Z,width:"2664",height:"1612"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a HeightRange proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' HeightRange proposition uses chain "header", min: 2, and max: 15'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a HeightRange proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"datums"),' contains an entry for the chain "header" with a height value of 100'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And HeightRange But not Satisfied",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"heightRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 100}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-heightrange-satisfied"},"Transaction Input with Attestation Type Predicate And HeightRange Satisfied"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(6201).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a HeightRange proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And"),' HeightRange proposition uses chain "header", min: 2, and max: 15'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a HeightRange proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext whose ",(0,a.kt)("inlineCode",{parentName:"li"},"datums"),' contains an entry for the chain "header" with a height value of 10'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nThe transaction is valid thus an empty list is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And HeightRange Satisfied",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"heightRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": []\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-tickrange-but-not-satisfied"},"Transaction Input with Attestation Type Predicate And TickRange But not Satisfied"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(6621).Z,width:"2664",height:"1612"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a TickRange proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," TickRange proposition uses min: 2, and max: 15"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a TickRange proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext value for ",(0,a.kt)("inlineCode",{parentName:"li"},"currentTick")," is 50"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,a.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr003-validationerror"},(0,a.kt)("inlineCode",{parentName:"a"},"CR003"))," is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And TickRange But not Satisfied",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"heightRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 50,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": ["CredentiallerError.ValidationError"]\n}\n')),(0,a.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-and-tickrange-satisfied"},"Transaction Input with Attestation Type Predicate And TickRange Satisfied"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:t(2785).Z,width:"2664",height:"1614"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Given")," ",(0,a.kt)("inlineCode",{parentName:"li"},"tx")," is an IoTransaction with a single input with an attestation ",(0,a.kt)("inlineCode",{parentName:"li"},"Predicate")," with a TickRange proposition "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," TickRange proposition uses min: 2, and max: 15"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"responses")," contains a TickRange proof"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," The predicate's threshold is 1"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"And")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx")," is a DynamicContext value for ",(0,a.kt)("inlineCode",{parentName:"li"},"currentTick")," is 10"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"When"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"validate(tx: IoTransaction, ctx: DynamicContext)\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Then"),"\nThe transaction is valid thus an empty list is returned")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate And TickRange Satisfied",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"heightRange": {"transactionBind": "txBind"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    },\n    "ctx": {\n      "signableBytes": "txBind",\n      "currentTick": 10,\n      "datums": {"header": {"height": 10}},\n      "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n      "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n    }\n  },\n  "outputs": []\n}\n')),(0,a.kt)("h3",{id:"test-vectors"},"Test Vectors"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "description": "Transaction Input with Attestation Type Image32/64",\n    "inputs": {\n      "tx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {"leaves": [], "threshold": 0},\n              "known": [],\n              "responses": []\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "xxxx",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": "TBD"\n  },\n  {\n    "description": "Transaction Input with Attestation Type Commitment32/64",\n    "inputs": {\n      "tx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {"root": "", "threshold": 0},\n              "known": [],\n              "responses": []\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "xxxx",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": "TBD"\n  },\n  {\n    "description": "Transaction Input with Proofs Whose TransactionBind Does Not Match the Context SignableBytes",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                  {"tickRange": {"min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"locked": {}},\n                {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}},\n                {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}},\n                {"heightRange": {"transactionBind": "txBind"}},\n                {"tickRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "wrong signable bytes",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate Whose Threshold is Unobtainable",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                  {"tickRange": {"min": 2, "max": 15}}\n                ], \n                "threshold": 6\n              },\n              "responses": [\n                {"locked": {}},\n                {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}},\n                {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}},\n                {"heightRange": {"transactionBind": "txBind"}},\n                {"tickRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And Locked Challenge",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"locked": {}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And None-Proofs",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}},\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}},\n                  {"tickRange": {"min": 2, "max": 15}}\n                ], \n                "threshold": 6\n              },\n              "responses": [\n                null,\n                null,\n                null,\n                null,\n                null\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And DigitalSignature But Signature Verifier not in Context",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"random": {"verify": "arbitrary verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And DigitalSignature With Invalid Proof",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"signature": {"transactionBind": "txBind", "witness": "witness_abc"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And DigitalSignature With Valid Proof",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"signature": {"transactionBind": "txBind", "witness": "witness_ijk"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": []\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And Digest But Digest Verifier not in Context",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"random": {"verify": "arbitrary verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And Digest With Invalid Proof",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"digest": {"transactionBind": "txBind", "preimage": "preimage_abc"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And Digest With Valid Proof",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"digest": {"transactionBind": "txBind", "preimage": "preimage_ijk"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": []\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And HeightRange But Height not in Context Datums",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"heightRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"era": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And HeightRange But not Satisfied",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"heightRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 100}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And HeightRange Satisfied",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"heightRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": []\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And TickRange But not Satisfied",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"heightRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 50,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": ["CredentiallerError.ValidationError"]\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate And TickRange Satisfied",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"heightRange": {"chain": "header", "min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"heightRange": {"transactionBind": "txBind"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      },\n      "ctx": {\n        "signableBytes": "txBind",\n        "currentTick": 10,\n        "datums": {"header": {"height": 10}},\n        "signingRoutines": {"ed25519": {"verify": "ed25519 verification"}},\n        "hashingRoutines": {"blake2b256": {"verify": "blake2b256 verification"}}\n      }\n    },\n    "outputs": []\n  }\n]\n')))}c.isMDXComponent=!0},3047:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/attestationCommitment-ba60e349e2f323814aa303db20ddb27e.png"},4893:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/attestationImage-068b3b00aa567f17082e0cc2edddcd92.png"},5087:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/digestProofInvalid-2810c761c5a672cae1a42c1b962e10bc.png"},8498:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/digestProofValid-25a2ee11da25c0981a38430275d61bf7.png"},2361:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/digestVerifierNotFound-212fa61daf90a1a58edd15ac07eb9f34.png"},1739:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/heightInvalid-aaa209cf19b5184160bd53031a51cc9c.png"},1670:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/heightNotFound-8e55628b5ac963b9f89f6497bbeab305.png"},6201:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/heightValid-fe384955d0394eff56f28d459bbaaa84.png"},2414:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/invalidBinding-fa1a2db85dc2a9e74030100c14a481f7.png"},8248:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/locked-8779867c724607fc8892e25a79d140ff.png"},202:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/noneProofs-2d7691356552e70128f0eac330ba2b46.png"},4e3:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/signatureProofInvalid-06b5a3d203e6f39c51e75feb0e2cf5bc.png"},9127:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/signatureProofValid-bed4a76324a748e7e6170eaf70482f23.png"},9315:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/signatureVerifierNotFound-e6816ab978b642a76adc45b52db35409.png"},6710:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/thresholdUnobtainable-7057d27cfc32274c42f5362b6c419094.png"},6621:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/tickInvalid-3a7b4a8f4501827c4d8dd5968267f8c6.png"},2785:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/tickValid-f79b03842b85a9af3a70c825dfa9d543.png"}}]);