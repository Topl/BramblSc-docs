"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[8194],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=n.createContext({}),d=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(r),h=i,k=m["".concat(o,".").concat(h)]||m[h]||p[h]||a;return r?n.createElement(k,l(l({ref:t},u),{},{components:r})):n.createElement(k,l({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var d=2;d<a;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9830:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=r(7462),i=(r(7294),r(3905));const a={},l="ByteVector",s={unversionedId:"Modules/Common/External Libraries/ByteVector/ByteVector",id:"Modules/Common/External Libraries/ByteVector/ByteVector",title:"ByteVector",description:"This page describes a data type named ByteVector that is used in the Brambl SDK for some of its methods/functions.",source:"@site/docs/Modules/Common/External Libraries/ByteVector/ByteVector.md",sourceDirName:"Modules/Common/External Libraries/ByteVector",slug:"/Modules/Common/External Libraries/ByteVector/",permalink:"/sdk-spec/docs/Modules/Common/External Libraries/ByteVector/",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Common/External Libraries/ByteVector/ByteVector.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"External Libraries",permalink:"/sdk-spec/docs/Modules/Common/External Libraries/"},next:{title:"Models",permalink:"/sdk-spec/docs/Modules/Common/Models/"}},o={},d=[{value:"Interface ByteVector",id:"interface-bytevector",level:2},{value:"method size",id:"method-size",level:3},{value:"Signature(s)",id:"signatures",level:4},{value:"Description",id:"description",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Errors",id:"errors",level:4},{value:"method isEmpty",id:"method-isempty",level:3},{value:"Signature(s)",id:"signatures-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Errors",id:"errors-1",level:4},{value:"method nonEmpty",id:"method-nonempty",level:3},{value:"Signature(s)",id:"signatures-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Errors",id:"errors-2",level:4},{value:"method get",id:"method-get",level:3},{value:"Signature(s)",id:"signatures-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Errors",id:"errors-3",level:4},{value:"method update",id:"method-update",level:3},{value:"Signature(s)",id:"signatures-4",level:4},{value:"Description",id:"description-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Errors",id:"errors-4",level:4},{value:"method insert",id:"method-insert",level:3},{value:"Signature(s)",id:"signatures-5",level:4},{value:"Description",id:"description-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Errors",id:"errors-5",level:4},{value:"method splice",id:"method-splice",level:3},{value:"Signature(s)",id:"signatures-6",level:4},{value:"Description",id:"description-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Errors",id:"errors-6",level:4},{value:"method patch",id:"method-patch",level:3},{value:"Signature(s)",id:"signatures-7",level:4},{value:"Description",id:"description-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Errors",id:"errors-7",level:4},{value:"method concatenate",id:"method-concatenate",level:3},{value:"Signature(s)",id:"signatures-8",level:4},{value:"Description",id:"description-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Errors",id:"errors-8",level:4},{value:"method append",id:"method-append",level:3},{value:"Signature(s)",id:"signatures-9",level:4},{value:"Description",id:"description-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Errors",id:"errors-9",level:4},{value:"method prepend",id:"method-prepend",level:3},{value:"Signature(s)",id:"signatures-10",level:4},{value:"Description",id:"description-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Errors",id:"errors-10",level:4},{value:"method drop",id:"method-drop",level:3},{value:"Signature(s)",id:"signatures-11",level:4},{value:"Description",id:"description-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Errors",id:"errors-11",level:4},{value:"method dropRight",id:"method-dropright",level:3},{value:"Signature(s)",id:"signatures-12",level:4},{value:"Description",id:"description-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Errors",id:"errors-12",level:4},{value:"method dropWhile",id:"method-dropwhile",level:3},{value:"Signature(s)",id:"signatures-13",level:4},{value:"Description",id:"description-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Errors",id:"errors-13",level:4},{value:"method take",id:"method-take",level:3},{value:"Signature(s)",id:"signatures-14",level:4},{value:"Description",id:"description-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Errors",id:"errors-14",level:4},{value:"method takeRight",id:"method-takeright",level:3},{value:"Signature(s)",id:"signatures-15",level:4},{value:"Description",id:"description-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Errors",id:"errors-15",level:4},{value:"method takeWhile",id:"method-takewhile",level:3},{value:"Signature(s)",id:"signatures-16",level:4},{value:"Description",id:"description-16",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Errors",id:"errors-16",level:4},{value:"method splitAt",id:"method-splitat",level:3},{value:"Signature(s)",id:"signatures-17",level:4},{value:"Description",id:"description-17",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Errors",id:"errors-17",level:4},{value:"method slice",id:"method-slice",level:3},{value:"Signature(s)",id:"signatures-18",level:4},{value:"Description",id:"description-18",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Errors",id:"errors-18",level:4},{value:"method acquire",id:"method-acquire",level:3},{value:"Signature(s)",id:"signatures-19",level:4},{value:"Description",id:"description-19",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Errors",id:"errors-19",level:4},{value:"method consume",id:"method-consume",level:3},{value:"Signature(s)",id:"signatures-20",level:4},{value:"Description",id:"description-20",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Errors",id:"errors-20",level:4},{value:"method foreach",id:"method-foreach",level:3},{value:"Signature(s)",id:"signatures-21",level:4},{value:"Description",id:"description-21",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Errors",id:"errors-21",level:4},{value:"method startsWith",id:"method-startswith",level:3},{value:"Signature(s)",id:"signatures-22",level:4},{value:"Description",id:"description-22",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Errors",id:"errors-22",level:4},{value:"method endsWith",id:"method-endswith",level:3},{value:"Signature(s)",id:"signatures-23",level:4},{value:"Description",id:"description-23",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Errors",id:"errors-23",level:4},{value:"method indexOfSlice",id:"method-indexofslice",level:3},{value:"Signature(s)",id:"signatures-24",level:4},{value:"Description",id:"description-24",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Errors",id:"errors-24",level:4},{value:"method containsSlice",id:"method-containsslice",level:3},{value:"Signature(s)",id:"signatures-25",level:4},{value:"Description",id:"description-25",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Errors",id:"errors-25",level:4},{value:"method head",id:"method-head",level:3},{value:"Signature(s)",id:"signatures-26",level:4},{value:"Description",id:"description-26",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Errors",id:"errors-26",level:4},{value:"method headOption",id:"method-headoption",level:3},{value:"Signature(s)",id:"signatures-27",level:4},{value:"Description",id:"description-27",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Errors",id:"errors-27",level:4},{value:"method tail",id:"method-tail",level:3},{value:"Signature(s)",id:"signatures-28",level:4},{value:"Description",id:"description-28",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Errors",id:"errors-28",level:4},{value:"method init",id:"method-init",level:3},{value:"Signature(s)",id:"signatures-29",level:4},{value:"Description",id:"description-29",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Errors",id:"errors-29",level:4},{value:"method last",id:"method-last",level:3},{value:"Signature(s)",id:"signatures-30",level:4},{value:"Description",id:"description-30",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Errors",id:"errors-30",level:4},{value:"method tailOption",id:"method-tailoption",level:3},{value:"Signature(s)",id:"signatures-31",level:4},{value:"Description",id:"description-31",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Errors",id:"errors-31",level:4},{value:"method padRight",id:"method-padright",level:3},{value:"Signature(s)",id:"signatures-32",level:4},{value:"Description",id:"description-32",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Errors",id:"errors-32",level:4},{value:"method padLeft",id:"method-padleft",level:3},{value:"Signature(s)",id:"signatures-33",level:4},{value:"Description",id:"description-33",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Errors",id:"errors-33",level:4},{value:"method map",id:"method-map",level:3},{value:"Signature(s)",id:"signatures-34",level:4},{value:"Description",id:"description-34",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Errors",id:"errors-34",level:4},{value:"method reverse",id:"method-reverse",level:3},{value:"Signature(s)",id:"signatures-35",level:4},{value:"Description",id:"description-35",level:4},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Errors",id:"errors-35",level:4},{value:"method shiftLeft",id:"method-shiftleft",level:3},{value:"Signature(s)",id:"signatures-36",level:4},{value:"Description",id:"description-36",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Errors",id:"errors-36",level:4},{value:"method shiftRight",id:"method-shiftright",level:3},{value:"Signature(s)",id:"signatures-37",level:4},{value:"Description",id:"description-37",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Errors",id:"errors-37",level:4},{value:"method rotateLeft",id:"method-rotateleft",level:3},{value:"Signature(s)",id:"signatures-38",level:4},{value:"Description",id:"description-38",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Errors",id:"errors-38",level:4},{value:"method rotateRight",id:"method-rotateright",level:3},{value:"Signature(s)",id:"signatures-39",level:4},{value:"Description",id:"description-39",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Errors",id:"errors-39",level:4},{value:"method compact",id:"method-compact",level:3},{value:"Signature(s)",id:"signatures-40",level:4},{value:"Description",id:"description-40",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Errors",id:"errors-40",level:4},{value:"method partialCompact",id:"method-partialcompact",level:3},{value:"Signature(s)",id:"signatures-41",level:4},{value:"Description",id:"description-41",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Errors",id:"errors-41",level:4},{value:"method copy",id:"method-copy",level:3},{value:"Signature(s)",id:"signatures-42",level:4},{value:"Description",id:"description-42",level:4},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Errors",id:"errors-42",level:4},{value:"method toArray",id:"method-toarray",level:3},{value:"Signature(s)",id:"signatures-43",level:4},{value:"Description",id:"description-43",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Errors",id:"errors-43",level:4},{value:"method copyToArray",id:"method-copytoarray",level:3},{value:"Signature(s)",id:"signatures-44",level:4},{value:"Description",id:"description-44",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Errors",id:"errors-44",level:4},{value:"method toHex",id:"method-tohex",level:3},{value:"Signature(s)",id:"signatures-45",level:4},{value:"Description",id:"description-45",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Errors",id:"errors-45",level:4},{value:"method hashCode",id:"method-hashcode",level:3},{value:"Signature(s)",id:"signatures-46",level:4},{value:"Description",id:"description-46",level:4},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Errors",id:"errors-46",level:4},{value:"method equals",id:"method-equals",level:3},{value:"Signature(s)",id:"signatures-47",level:4},{value:"Description",id:"description-47",level:4},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Errors",id:"errors-47",level:4}],u={toc:d};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bytevector"},"ByteVector"),(0,i.kt)("p",null,"This page describes a data type named ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," that is used in the Brambl SDK for some of its methods/functions."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," object is an immutable vector of bytes, backed by a balanced binary tree of chunks. Most operations are\nlogarithmic in the depth of this tree, including concatenate, prepend, append, update, and insert. Where possible,\noperations return lazy views rather than copying any underlying bytes. Use copy to copy all underlying bytes to a fresh,\narray-backed ByteVector."),(0,i.kt)("p",null,"Below is a description of an interface that defines the behavior of a ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," object. The details of the class\nthat implements this interface are not specified in this document. In particular, the constructor(s) for the class will\nbe implementation specific."),(0,i.kt)("p",null,"Additional conversion functions/methods beyond those mentioned belos may be useful. The specific types will vary with\nthe implementation language. Some conversion functions/methods that may be useful will be to streams, I/O streams,\nbuffers and bit vectors."),(0,i.kt)("h2",{id:"interface-bytevector"},"Interface ByteVector"),(0,i.kt)("p",null,"This class is responsible for hashing data using the Blake2b-256 algorithm. It can be implemented as a thin wrapper\naround the Blake2b-256 algorithm provided by a library for the implementation language."),(0,i.kt)("h3",{id:"method-size"},"method size"),(0,i.kt)("h4",{id:"signatures"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"size() returns Long\n")),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Returns the number of bytes in this ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,"Returns the number of bytes in this ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-isempty"},"method isEmpty"),(0,i.kt)("h4",{id:"signatures-1"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"isEmpty() returns Boolean\n")),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Returns true if this vector has no bytes."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"Returns true if this vector has no bytes."),(0,i.kt)("h4",{id:"errors-1"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-nonempty"},"method nonEmpty"),(0,i.kt)("h4",{id:"signatures-2"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nonEmpty() returns Boolean\n")),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Returns true if this vector has a non-zero number of bytes."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,"Returns true if this vector has a non-zero number of bytes."),(0,i.kt)("h4",{id:"errors-2"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-get"},"method get"),(0,i.kt)("h4",{id:"signatures-3"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"get(index: Long) returns Byte\n")),(0,i.kt)("h4",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Gets the byte at the specified index."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index")," \u2014 The index of the byte to get.")),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,"Returns the byte at the specified index."),(0,i.kt)("h4",{id:"errors-3"},"Errors"),(0,i.kt)("p",null,"Signals an error if the index is out of bounds (<0 or >= size)."),(0,i.kt)("h3",{id:"method-update"},"method update"),(0,i.kt)("h4",{id:"signatures-4"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"update(idx: Long, b: Byte) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-4"},"Description"),(0,i.kt)("p",null,"Create a vector with the byte at the specified index replaced with the specified byte."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.take(idx).append(b).concatenate(this.drop(idx + 1))"),"."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"idx")," \u2014 The index of the byte to replace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," \u2014 The byte to replace the byte at the specified index with.")),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,"The updated vector."),(0,i.kt)("h4",{id:"errors-4"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-insert"},"method insert"),(0,i.kt)("h4",{id:"signatures-5"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"insert(idx: Long, b: Byte) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-5"},"Description"),(0,i.kt)("p",null,"Returns a vector with the specified byte inserted at the specified index."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.take(idx).append(b).concatenate(this.drop(idx))"),"."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"idx")," \u2014 The index at which to insert the byte."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," \u2014 The byte to insert.")),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,"Returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," with the insertion."),(0,i.kt)("h4",{id:"errors-5"},"Errors"),(0,i.kt)("p",null,"Signals an error if the index is out of bounds (<0 or >= size)."),(0,i.kt)("h3",{id:"method-splice"},"method splice"),(0,i.kt)("h4",{id:"signatures-6"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"splice(idx: Long, b: ByteVector) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-6"},"Description"),(0,i.kt)("p",null,"Returns a vector with the specified byte vector inserted at the specified index."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.take(idx).concatenate(b).concatenate(this.drop(idx))"),"."),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"idx")," \u2014 The index at which to insert the byte vector."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," ",(0,i.kt)("inlineCode",{parentName:"li"},"ByteVector")," \u2014 The byte vector to insert.")),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,"Returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," with the insertion."),(0,i.kt)("h4",{id:"errors-6"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-patch"},"method patch"),(0,i.kt)("h4",{id:"signatures-7"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"patch(idx: Long, b: ByteVector) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-7"},"Description"),(0,i.kt)("p",null,"Returns a vector with the specified byte vector replacing bytes ",(0,i.kt)("inlineCode",{parentName:"p"},"idx")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"idx + b.size"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"idx+b.size")," is greater than\nthe size of this vector, then the result is longer than this vector."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.take(idx).concatenate(b).concatenate(this.drop(idx + b.size))"),"."),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"idx")," \u2014 The index at which to replace the byte vector."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," ",(0,i.kt)("inlineCode",{parentName:"li"},"ByteVector")," \u2014 The byte vector to replace the existing bytes.")),(0,i.kt)("h4",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,"Returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," with the replacement."),(0,i.kt)("h4",{id:"errors-7"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-concatenate"},"method concatenate"),(0,i.kt)("h4",{id:"signatures-8"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"concatenate(other: ByteVector) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-8"},"Description"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents followed by the specified vector's contents."),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents followed by the specified vector's contents."),(0,i.kt)("h4",{id:"errors-8"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-append"},"method append"),(0,i.kt)("h4",{id:"signatures-9"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"append(other: Byte) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-9"},"Description"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents followed by the specified byte."),(0,i.kt)("h4",{id:"parameters-9"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"other")," \u2014 The byte to append to this vector.")),(0,i.kt)("h4",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents followed by the specified byte."),(0,i.kt)("h4",{id:"errors-9"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-prepend"},"method prepend"),(0,i.kt)("h4",{id:"signatures-10"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"prepend(other: Byte) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-10"},"Description"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents preceded by the specified byte."),(0,i.kt)("h4",{id:"parameters-10"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"other")," \u2014 The byte to prepend to this vector.")),(0,i.kt)("h4",{id:"returns-10"},"Returns"),(0,i.kt)("p",null,"Returns a new byte vector representing this vector's contents preceded by the specified byte."),(0,i.kt)("h4",{id:"errors-10"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-drop"},"method drop"),(0,i.kt)("h4",{id:"signatures-11"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"drop(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-11"},"Description"),(0,i.kt)("p",null,"Returns a vector of all bytes in this vector except the first n bytes.\nThe resulting vector's size is ",(0,i.kt)("inlineCode",{parentName:"p"},"max(0, size - n)"),"."),(0,i.kt)("h4",{id:"parameters-11"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to drop from the beginning of this vector. Negative values are treated as 0.")),(0,i.kt)("h4",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-11"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-dropright"},"method dropRight"),(0,i.kt)("h4",{id:"signatures-12"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dropRight(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-12"},"Description"),(0,i.kt)("p",null,"Returns a vector of all bytes in this vector except the last n bytes.\nThe resulting vector's size is ",(0,i.kt)("inlineCode",{parentName:"p"},"max(0, size - n)"),"."),(0,i.kt)("h4",{id:"parameters-12"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to drop from the end of this vector. Negative values are treated as 0.")),(0,i.kt)("h4",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-12"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-dropwhile"},"method dropWhile"),(0,i.kt)("h4",{id:"signatures-13"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dropWhile(f: (Byte) returns Boolean) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-13"},"Description"),(0,i.kt)("p",null,"Drops the longest prefix of this vector such that every byte of the prefix satisfies the specific predicate."),(0,i.kt)("h4",{id:"parameters-13"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"f")," \u2014 The predicate used to test bytes. This is a function that takes a byte and returns a boolean.")),(0,i.kt)("h4",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-13"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-take"},"method take"),(0,i.kt)("h4",{id:"signatures-14"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"take(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-14"},"Description"),(0,i.kt)("p",null,"Returns a vector of the first n bytes of this vector.\nThe resulting vector's size is ",(0,i.kt)("inlineCode",{parentName:"p"},"min(n, size)"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note"),": if an exactly n-byte vector is required, use the acquire method instead."),(0,i.kt)("h4",{id:"parameters-14"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to take from the beginning of this vector. Negative values are treated as 0.")),(0,i.kt)("h4",{id:"returns-14"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-14"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-takeright"},"method takeRight"),(0,i.kt)("h4",{id:"signatures-15"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"takeRight(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-15"},"Description"),(0,i.kt)("p",null,"Returns a vector of the last n bytes of this vector.\nThe resulting vector's size is ",(0,i.kt)("inlineCode",{parentName:"p"},"min(n, size)"),"."),(0,i.kt)("h4",{id:"parameters-15"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to take from the end of this vector. Negative values are treated as 0.")),(0,i.kt)("h4",{id:"returns-15"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-15"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-takewhile"},"method takeWhile"),(0,i.kt)("h4",{id:"signatures-16"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"takeWhile(f: (Byte) returns Boolean) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-16"},"Description"),(0,i.kt)("p",null,"Returns the longest prefix of this vector such that every byte of the prefix satisfies the specific predicate."),(0,i.kt)("h4",{id:"parameters-16"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"f")," \u2014 The predicate used to test bytes. This is a function that takes a byte and returns a boolean.")),(0,i.kt)("h4",{id:"returns-16"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-16"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-splitat"},"method splitAt"),(0,i.kt)("h4",{id:"signatures-17"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"splitAt(n: Long): Array[ByteVector]\n")),(0,i.kt)("h4",{id:"description-17"},"Description"),(0,i.kt)("p",null,"Returns an array of two vectors such that the first element is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"take(n)")," and the second element is equal to\n",(0,i.kt)("inlineCode",{parentName:"p"},"drop(n)"),"."),(0,i.kt)("h4",{id:"parameters-17"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The index at which to split this vector.")),(0,i.kt)("h4",{id:"returns-17"},"Returns"),(0,i.kt)("p",null,"The array of two byte vectors."),(0,i.kt)("h4",{id:"errors-17"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-slice"},"method slice"),(0,i.kt)("h4",{id:"signatures-18"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"slice(from: Long, until: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-18"},"Description"),(0,i.kt)("p",null,"Returns a vector made up of the bytes starting at index ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," up to index ",(0,i.kt)("inlineCode",{parentName:"p"},"until"),"."),(0,i.kt)("p",null,"This is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"this.drop(from).take(until - from.max(0))"),"."),(0,i.kt)("h4",{id:"parameters-18"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from")," \u2014 The index at which to start the slice."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"until")," \u2014 The index at which to end the slice.")),(0,i.kt)("h4",{id:"returns-18"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-18"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-acquire"},"method acquire"),(0,i.kt)("h4",{id:"signatures-19"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"acquire(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-19"},"Description"),(0,i.kt)("p",null,"Returns a vector whose contents are the results of taking the first n bytes of this vector."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See also"),": take"),(0,i.kt)("h4",{id:"parameters-19"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to take from the beginning of this vector. Negative values are treated as 0.")),(0,i.kt)("h4",{id:"returns-19"},"Returns"),(0,i.kt)("p",null,"Returns a vector whose contents are the results of taking the first n bytes of this vector."),(0,i.kt)("h4",{id:"errors-19"},"Errors"),(0,i.kt)("p",null,"If this vector does not contain at least n bytes, an error is signalled."),(0,i.kt)("h3",{id:"method-consume"},"method consume"),(0,i.kt)("h4",{id:"signatures-20"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"consume( n: Long, decode: (ByteVector) returns Object) returns Array[Object]\n")),(0,i.kt)("h4",{id:"description-20"},"Description"),(0,i.kt)("p",null,"Consumes the first n bytes of this vector and decodes them with the specified function, resulting in a vector of the\nremaining bytes and the decoded value."),(0,i.kt)("h4",{id:"parameters-20"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bytes to consume."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"decode")," \u2014 The function used to decode the bytes. This is a function that takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"ByteVector")," and returns an object.")),(0,i.kt)("h4",{id:"returns-20"},"Returns"),(0,i.kt)("p",null,"Returns an array of two elements: the first element is a byte vector containing the remaining bytes, and the second\nelement is the decoded value."),(0,i.kt)("h4",{id:"errors-20"},"Errors"),(0,i.kt)("p",null,"If this vector does not have n bytes or an error occurs while decoding, an error is signaled."),(0,i.kt)("h3",{id:"method-foreach"},"method foreach"),(0,i.kt)("h4",{id:"signatures-21"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"foreach(f: (Byte))\n")),(0,i.kt)("h4",{id:"description-21"},"Description"),(0,i.kt)("p",null,"Apply the specified function to each byte in this vector."),(0,i.kt)("h4",{id:"parameters-21"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"f")," \u2014 The function to apply to each byte. This is a function that takes a byte and returns nothing.")),(0,i.kt)("h4",{id:"returns-21"},"Returns"),(0,i.kt)("p",null,"Returns nothing."),(0,i.kt)("h4",{id:"errors-21"},"Errors"),(0,i.kt)("p",null,"Signals an error if the specified function signals an error."),(0,i.kt)("h3",{id:"method-startswith"},"method startsWith"),(0,i.kt)("h4",{id:"signatures-22"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"startsWith(b: ByteVector): Boolean\n")),(0,i.kt)("h4",{id:"description-22"},"Description"),(0,i.kt)("p",null,"Returns true if this byte vector starts with the specified vector."),(0,i.kt)("h4",{id:"parameters-22"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," \u2014 The vector to test as a prefix of the byte vector.")),(0,i.kt)("h4",{id:"returns-22"},"Returns"),(0,i.kt)("p",null,"Returns true if this byte vector starts with the specified vector."),(0,i.kt)("h4",{id:"errors-22"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-endswith"},"method endsWith"),(0,i.kt)("h4",{id:"signatures-23"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"endsWith(b: ByteVector): Boolean\n")),(0,i.kt)("h4",{id:"description-23"},"Description"),(0,i.kt)("p",null,"Returns true if this byte vector ends with the specified vector."),(0,i.kt)("h4",{id:"parameters-23"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," \u2014 The vector to test as a suffix of the byte vector.")),(0,i.kt)("h4",{id:"returns-23"},"Returns"),(0,i.kt)("p",null,"Returns true if this byte vector ends with the specified vector."),(0,i.kt)("h4",{id:"errors-23"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-indexofslice"},"method indexOfSlice"),(0,i.kt)("h4",{id:"signatures-24"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"indexOfSlice(slice: ByteVector): Long\nindexOfSlice(slice: ByteVector, from: Long): Long\n")),(0,i.kt)("h4",{id:"description-24"},"Description"),(0,i.kt)("p",null,"Finds the first index of the specified byte pattern in this vector."),(0,i.kt)("h4",{id:"parameters-24"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"slice")," \u2014 The byte pattern to search for."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from")," \u2014 The index at which to start the search. Defaults to 0.")),(0,i.kt)("h4",{id:"returns-24"},"Returns"),(0,i.kt)("p",null,"Returns the index of the first occurrence of the specified byte pattern, or -1 if the pattern is not found."),(0,i.kt)("h4",{id:"errors-24"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-containsslice"},"method containsSlice"),(0,i.kt)("h4",{id:"signatures-25"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"containsSlice(slice: ByteVector) returns Boolean\n")),(0,i.kt)("h4",{id:"description-25"},"Description"),(0,i.kt)("p",null,"Determines if the specified slice is in this vector."),(0,i.kt)("h4",{id:"parameters-25"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"slice")," \u2014 The byte pattern to search for.")),(0,i.kt)("h4",{id:"returns-25"},"Returns"),(0,i.kt)("p",null,"Returns true if the specified slice is in this vector."),(0,i.kt)("h4",{id:"errors-25"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-head"},"method head"),(0,i.kt)("h4",{id:"signatures-26"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"head() returns Byte\n")),(0,i.kt)("h4",{id:"description-26"},"Description"),(0,i.kt)("p",null,"Returns the first byte in this vector."),(0,i.kt)("h4",{id:"parameters-26"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-26"},"Returns"),(0,i.kt)("p",null,"Returns the first byte in this vector."),(0,i.kt)("h4",{id:"errors-26"},"Errors"),(0,i.kt)("p",null,"Signals an error if this vector is empty."),(0,i.kt)("h3",{id:"method-headoption"},"method headOption"),(0,i.kt)("h4",{id:"signatures-27"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"headOption() returns Option[Byte]\n")),(0,i.kt)("h4",{id:"description-27"},"Description"),(0,i.kt)("p",null,"Returns the first byte of this vector or None if the vector is empty."),(0,i.kt)("h4",{id:"parameters-27"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-27"},"Returns"),(0,i.kt)("p",null,"Returns an Option containing the first byte of this vector or None if the vector is empty."),(0,i.kt)("h4",{id:"errors-27"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-tail"},"method tail"),(0,i.kt)("h4",{id:"signatures-28"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tail() returns ByteVector\n")),(0,i.kt)("h4",{id:"description-28"},"Description"),(0,i.kt)("p",null,"Returns a vector containing all bytes in this vector except the first byte."),(0,i.kt)("h4",{id:"parameters-28"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-28"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-28"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-init"},"method init"),(0,i.kt)("h4",{id:"signatures-29"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"init() returns ByteVector\n")),(0,i.kt)("h4",{id:"description-29"},"Description"),(0,i.kt)("p",null,"Returns a vector containing all bytes in this vector except the last byte."),(0,i.kt)("h4",{id:"parameters-29"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-29"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-29"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-last"},"method last"),(0,i.kt)("h4",{id:"signatures-30"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"last() returns Byte\n")),(0,i.kt)("h4",{id:"description-30"},"Description"),(0,i.kt)("p",null,"Returns the last byte in this vector."),(0,i.kt)("h4",{id:"parameters-30"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-30"},"Returns"),(0,i.kt)("p",null,"Returns the last byte in this vector."),(0,i.kt)("h4",{id:"errors-30"},"Errors"),(0,i.kt)("p",null,"Signals an error if this vector is empty."),(0,i.kt)("h3",{id:"method-tailoption"},"method tailOption"),(0,i.kt)("h4",{id:"signatures-31"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tailOption() returns Option[Byte]\n")),(0,i.kt)("h4",{id:"description-31"},"Description"),(0,i.kt)("p",null,"Returns the last byte of this vector or None if the vector is empty."),(0,i.kt)("h4",{id:"parameters-31"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-31"},"Returns"),(0,i.kt)("p",null,"Returns an Option containing the last byte of this vector or None if the vector is empty."),(0,i.kt)("h4",{id:"errors-31"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-padright"},"method padRight"),(0,i.kt)("h4",{id:"signatures-32"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"padRight(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-32"},"Description"),(0,i.kt)("p",null,"Returns an n-byte vector whose contents are this vector's contents followed by 0 or more zero bytes."),(0,i.kt)("h4",{id:"parameters-32"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The larger size to pad to.")),(0,i.kt)("h4",{id:"returns-32"},"Returns"),(0,i.kt)("p",null,"Returns the new padded ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-32"},"Errors"),(0,i.kt)("p",null,"Signals an error if n is less than the size of this vector."),(0,i.kt)("h3",{id:"method-padleft"},"method padLeft"),(0,i.kt)("h4",{id:"signatures-33"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"padLeft(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-33"},"Description"),(0,i.kt)("p",null,"Returns an n-bytes vector whose contents are 0 or more zero bytes followed by this vector's contents."),(0,i.kt)("h4",{id:"parameters-33"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The larger size to pad to.")),(0,i.kt)("h4",{id:"returns-33"},"Returns"),(0,i.kt)("p",null,"Returns the new padded ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-33"},"Errors"),(0,i.kt)("p",null,"Signals an error if n is less than the size of this vector."),(0,i.kt)("h3",{id:"method-map"},"method map"),(0,i.kt)("h4",{id:"signatures-34"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"map(f: (Byte) returns Byte) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-34"},"Description"),(0,i.kt)("p",null,"Computes a new byte vector where each byte is the result of applying the specified function to the corresponding byte in\nthis vector. This method returns a view and hence, is O(1). Call compact to generate a new strict vector."),(0,i.kt)("h4",{id:"parameters-34"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-34"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-34"},"Errors"),(0,i.kt)("p",null,"Signals an error if the specified function signals an error."),(0,i.kt)("h3",{id:"method-reverse"},"method reverse"),(0,i.kt)("h4",{id:"signatures-35"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"reverse() returns ByteVector\n")),(0,i.kt)("h4",{id:"description-35"},"Description"),(0,i.kt)("p",null,"Returns a vector with the bytes of this vector in reverse order. This method returns a view and hence, is O(1). Call\ncompact to generate a new strict vector."),(0,i.kt)("h4",{id:"parameters-35"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-35"},"Returns"),(0,i.kt)("p",null,"Returns a vector with the bytes of this vector in reverse order."),(0,i.kt)("h4",{id:"errors-35"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-shiftleft"},"method shiftLeft"),(0,i.kt)("h4",{id:"signatures-36"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"shiftLeft(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-36"},"Description"),(0,i.kt)("p",null,"Computes a new byte vector that contains the bits of this vector shifted left by the specified number of bits."),(0,i.kt)("h4",{id:"parameters-36"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bits to shift left.")),(0,i.kt)("h4",{id:"returns-36"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-36"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-shiftright"},"method shiftRight"),(0,i.kt)("h4",{id:"signatures-37"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"shiftRight(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-37"},"Description"),(0,i.kt)("p",null,"Computes a new byte vector that contains the bits of this vector shifted right by the specified number of bits."),(0,i.kt)("h4",{id:"parameters-37"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bits to shift right.")),(0,i.kt)("h4",{id:"returns-37"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-37"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-rotateleft"},"method rotateLeft"),(0,i.kt)("h4",{id:"signatures-38"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"rotateLeft(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-38"},"Description"),(0,i.kt)("p",null,"Computes a new byte vector that contains the bits of this vector rotated left by the specified number of bits."),(0,i.kt)("h4",{id:"parameters-38"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bits to rotate left.")),(0,i.kt)("h4",{id:"returns-38"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-38"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-rotateright"},"method rotateRight"),(0,i.kt)("h4",{id:"signatures-39"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"rotateRight(n: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-39"},"Description"),(0,i.kt)("p",null,"Computes a new byte vector that contains the bits of this vector rotated right by the specified number of bits."),(0,i.kt)("h4",{id:"parameters-39"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n")," \u2014 The number of bits to rotate right.")),(0,i.kt)("h4",{id:"returns-39"},"Returns"),(0,i.kt)("p",null,"Returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-39"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-compact"},"method compact"),(0,i.kt)("h4",{id:"signatures-40"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"compact() returns ByteVector\n")),(0,i.kt)("h4",{id:"description-40"},"Description"),(0,i.kt)("p",null,"Returns a vector with the same contents but represented as a single tree node internally.\nThis may involve copying data, but has the advantage that lookups index directly into a single node rather than\ntraversing a logarithmic number of nodes in this tree.\nCalling this method on an already compacted vector is a no-op."),(0,i.kt)("h4",{id:"parameters-40"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-40"},"Returns"),(0,i.kt)("p",null,"Returns the compacted ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-40"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-partialcompact"},"method partialCompact"),(0,i.kt)("h4",{id:"signatures-41"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"partialCompact(chunkSize: Long) returns ByteVector\n")),(0,i.kt)("h4",{id:"description-41"},"Description"),(0,i.kt)("p",null,"Invokes compact on any subtrees whose size is <= chunkSize."),(0,i.kt)("h4",{id:"parameters-41"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chunkSize")," \u2014 The threshold size of chunks to compact.")),(0,i.kt)("h4",{id:"returns-41"},"Returns"),(0,i.kt)("p",null,"Returns the compacted ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-41"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-copy"},"method copy"),(0,i.kt)("h4",{id:"signatures-42"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"copy() returns ByteVector\n")),(0,i.kt)("h4",{id:"description-42"},"Description"),(0,i.kt)("p",null,"Returns a vector with the same contents as this vector but with a single compacted node made up by evaluating all\ninternal nodes and concatenating their values."),(0,i.kt)("h4",{id:"parameters-42"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-42"},"Returns"),(0,i.kt)("p",null,"Returns the copied ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-42"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-toarray"},"method toArray"),(0,i.kt)("h4",{id:"signatures-43"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"toArray returns Array[Byte]\n")),(0,i.kt)("h4",{id:"description-43"},"Description"),(0,i.kt)("p",null,"Allocate a new array and copy the contents of this vector into it."),(0,i.kt)("h4",{id:"parameters-43"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-43"},"Returns"),(0,i.kt)("p",null,"Returns the byte array."),(0,i.kt)("h4",{id:"errors-43"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-copytoarray"},"method copyToArray"),(0,i.kt)("h4",{id:"signatures-44"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"copyToArray(xs: Array[Byte], start: Int)\ncopyToArray(xs: Array[Byte], start: Int)copyToArray(xs: Array[Byte], start: Int, offset: Long, size: Int)\n")),(0,i.kt)("h4",{id:"description-44"},"Description"),(0,i.kt)("p",null,"Copies the contents of this vector into the specified array starting at the specified index. Bytes that do not fit in\nthe array are silently dropped."),(0,i.kt)("h4",{id:"parameters-44"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"xs")," \u2014 The array to copy into."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start")," \u2014 The index in the array ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," to start copying at."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"offset")," \u2014 The offset in this vector to start copying from. Defaults to zero."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"size")," \u2014 The number of bytes to copy.")),(0,i.kt)("h4",{id:"returns-44"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"errors-44"},"Errors"),(0,i.kt)("h3",{id:"method-tohex"},"method toHex"),(0,i.kt)("h4",{id:"signatures-45"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"toHex() returns String\n")),(0,i.kt)("h4",{id:"description-45"},"Description"),(0,i.kt)("p",null,"Returns a hexadecimal string representation of this vector. Each byte is represented by two hexadecimal digits."),(0,i.kt)("h4",{id:"parameters-45"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-45"},"Returns"),(0,i.kt)("p",null,"Returns the number of bytes in this ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector"),"."),(0,i.kt)("h4",{id:"errors-45"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-hashcode"},"method hashCode"),(0,i.kt)("h4",{id:"signatures-46"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"hashCode() returns Int\n")),(0,i.kt)("h4",{id:"description-46"},"Description"),(0,i.kt)("p",null,"Calculates a hash code for this vector. The result is cached."),(0,i.kt)("h4",{id:"parameters-46"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-46"},"Returns"),(0,i.kt)("p",null,"Returns the hashcode."),(0,i.kt)("h4",{id:"errors-46"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h3",{id:"method-equals"},"method equals"),(0,i.kt)("h4",{id:"signatures-47"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"equals(that: Object) returns Bool\n")),(0,i.kt)("h4",{id:"description-47"},"Description"),(0,i.kt)("p",null,"Returns true if ",(0,i.kt)("inlineCode",{parentName:"p"},"that")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," that has the same content as this."),(0,i.kt)("h4",{id:"parameters-47"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))),(0,i.kt)("h4",{id:"returns-47"},"Returns"),(0,i.kt)("p",null,"Returns true if ",(0,i.kt)("inlineCode",{parentName:"p"},"that")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"ByteVector")," that has the same content as this."),(0,i.kt)("h4",{id:"errors-47"},"Errors"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"None"))))}p.isMDXComponent=!0}}]);