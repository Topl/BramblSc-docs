"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[4135],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=a.createContext({}),d=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=d(n.components);return a.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,l=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),u=d(t),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(h,s(s({ref:e},c),{},{components:t})):a.createElement(h,s({ref:e},c))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o.mdxType="string"==typeof n?n:i,s[1]=o;for(var d=2;d<r;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4090:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const r={},s="Prove an Unproven Transaction",o={unversionedId:"Modules/Wallet/Credentialler/Prove",id:"Modules/Wallet/Credentialler/Prove",title:"Prove an Unproven Transaction",description:"TODO: Link to models",source:"@site/docs/Modules/Wallet/Credentialler/Prove.md",sourceDirName:"Modules/Wallet/Credentialler",slug:"/Modules/Wallet/Credentialler/Prove",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/Prove",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Wallet/Credentialler/Prove.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Credentials",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/"},next:{title:"Prove Then Validate a Transaction",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/ProveAndValidate"}},l={},d=[{value:"Signature(s)",id:"signatures",level:2},{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Testing Procedure",id:"testing-procedure",level:2},{value:"Test Cases",id:"test-cases",level:3},{value:"Transaction Input Referencing a KnownIdentifier Unknown to the Wallet",id:"transaction-input-referencing-a-knownidentifier-unknown-to-the-wallet",level:4},{value:"Transaction Input with Attestation Type Image32/64",id:"transaction-input-with-attestation-type-image3264",level:4},{value:"Transaction Input with Attestation Type Commitment32/64",id:"transaction-input-with-attestation-type-commitment3264",level:4},{value:"Transaction Input with Attestation Type Predicate Whose Challenges and Responses Lengths Differ",id:"transaction-input-with-attestation-type-predicate-whose-challenges-and-responses-lengths-differ",level:4},{value:"Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Available)",id:"transaction-input-with-attestation-type-predicate-with-proof-that-requires-secret-data-available",level:4},{value:"Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Unavailable)",id:"transaction-input-with-attestation-type-predicate-with-proof-that-requires-secret-data-unavailable",level:4},{value:"Transaction Input with Attestation Type Predicate With Proof That Does Not Require Secret Data",id:"transaction-input-with-attestation-type-predicate-with-proof-that-does-not-require-secret-data",level:4},{value:"Test Vectors",id:"test-vectors",level:3}],c={toc:d};function p(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prove-an-unproven-transaction"},"Prove an Unproven Transaction"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"TODO: Link to models")),(0,i.kt)("h2",{id:"signatures"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction): Either[List[CredentiallerError], IoTransaction]\n")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Prove an unproven IoTransaction. This involves adding proofs to the transaction inputs' attestations."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"prove diagram",src:t(3520).Z,width:"338",height:"521"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"prove input diagram",src:t(4712).Z,width:"717",height:"841"})),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx"),(0,i.kt)("br",{parentName:"li"}),"The transaction to prove.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type: IoTransaction"),(0,i.kt)("li",{parentName:"ul"},"Required")))),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,"Either[List[",(0,i.kt)("a",{parentName:"p",href:"/sdk-spec/docs/Modules/Common/Models/Errors#credentiallererror"},"CredentiallerError"),"], IoTransaction]"),(0,i.kt)("p",null,"The proven IoTransaction if possible. If not, a list of errors that occured."),(0,i.kt)("h2",{id:"testing-procedure"},"Testing Procedure"),(0,i.kt)("h3",{id:"test-cases"},"Test Cases"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(9571).Z,width:"1172",height:"1475"})),(0,i.kt)("p",null,"The following test cases only consider a transaction of 3 : a : A => 3 : a : B. That is, a single input to single output transaction where the quantity and asset type do not change but the Address does."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(3934).Z,width:"465",height:"445"})),(0,i.kt)("h4",{id:"transaction-input-referencing-a-knownidentifier-unknown-to-the-wallet"},"Transaction Input Referencing a KnownIdentifier Unknown to the Wallet"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(8736).Z,width:"2354",height:"1062"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(5438).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input that refers to a ",(0,i.kt)("inlineCode",{parentName:"li"},"knownIdentifier")," that is unknown to the wallet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," ",(0,i.kt)("inlineCode",{parentName:"li"},"lock.challenges")," in the Attestation contains a Locked, Tick, Height, DigitalSignature, and Digest proposition"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nReturn the proven transaction containing proofs for Locked, Tick, and Height propositions and None for DigitalSignature and Digest propositions")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input Referencing a KnownIdentifier Unknown to the Wallet",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "fake commitment that does not exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"height": {"chain": "header", "min": 2, "max": 15}},\n                {"tick": {"min": 2, "max": 15}},\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null, null, null, null, null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": {\n    "right": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "fake commitment that does not exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"height": {"chain": "header", "min": 2, "max": 15}},\n                {"tick": {"min": 2, "max": 15}},\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"locked": {}},\n              {"height": {"transactionBind": "xxxx"}},\n              {"tick": {"transactionBind": "xxxx"}},\n              null,\n              null\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  }\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-image3264"},"Transaction Input with Attestation Type Image32/64"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(9028).Z,width:"2464",height:"1083"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(1121).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Image32")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Image64")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nTBD")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Image32/64",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {"leaves": [], "threshold": 0},\n            "known": [],\n            "responses": []\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": "TBD"\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-commitment3264"},"Transaction Input with Attestation Type Commitment32/64"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(6644).Z,width:"2460",height:"1088"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(585).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Commitment32")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Commitment64")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nTBD")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Commitment32/64",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {"root": "", "threshold": 0},\n            "known": [],\n            "responses": []\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": "TBD"\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-whose-challenges-and-responses-lengths-differ"},"Transaction Input with Attestation Type Predicate Whose Challenges and Responses Lengths Differ"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(2697).Z,width:"2458",height:"1073"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(8858).Z,width:"2337",height:"961"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Predicate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the length of ",(0,i.kt)("inlineCode",{parentName:"li"},"responses")," and length of ",(0,i.kt)("inlineCode",{parentName:"li"},"lock.challenges")," do not match"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nA list containing the error ",(0,i.kt)("a",{parentName:"li",href:"/sdk-spec/docs/Modules/Common/Models/Errors#cr002-attestationmalformed"},(0,i.kt)("inlineCode",{parentName:"a"},"CR002"))," is returned")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate Whose Challenges and Responses Lengths Differ",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"tickRange": {"min": 2, "max": 10}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": {\n    "left": ["CredentiallerError.AttestationMalformed"]\n  }\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-with-proof-that-requires-secret-data-available"},"Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Available)"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(5791).Z,width:"2467",height:"1083"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(1089).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Predicate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the challenges in the predicate require access to secret data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the wallet has access to that data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nThe proven transaction is returned")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Available)",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null, null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": {\n    "right": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"signature": {"transactionBind": "xxxx", "witness": "witness_ijk"}},\n              {"digest": {"transactionBind": "xxxx", "preimage": "preimage_ijk"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  }\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-with-proof-that-requires-secret-data-unavailable"},"Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Unavailable)"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(5791).Z,width:"2467",height:"1083"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(2854).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Predicate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the challenges in the predicate require access to secret data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the wallet does not have access to that data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nThe unmodified transaction is returned.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Unavailable)",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null, null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": {\n    "right": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null, null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  }\n}\n')),(0,i.kt)("h4",{id:"transaction-input-with-attestation-type-predicate-with-proof-that-does-not-require-secret-data"},"Transaction Input with Attestation Type Predicate With Proof That Does Not Require Secret Data"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(3705).Z,width:"2471",height:"1080"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"diagram",src:t(4446).Z,width:"3019",height:"965"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," ",(0,i.kt)("inlineCode",{parentName:"li"},"unprovenTx")," is an IoTransaction with a single input with an attestation type ",(0,i.kt)("inlineCode",{parentName:"li"},"Predicate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," the challenges in the predicate do not require access to secret data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"When"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"prove(unprovenTx: IoTransaction)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),"\nThe proven transaction is returned")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Transaction Input with Attestation Type Predicate With Proof That Does Not Require Secret Data",\n  "inputs": {\n    "unprovenTx": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"height": {"chain": "header", "min": 2, "max": 15}},\n                {"tick": {"min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [null, null, null]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  },\n  "outputs": {\n    "right": {\n      "inputs": [\n        {\n          "knownIdentifier": {\n            "network": 0,\n            "ledger": 0,\n            "index": 0,\n            "id": {\n              "tag": "iotx_32",\n              "evidence": "real commitment that does exist"\n            }\n          },\n          "attestation": {\n            "lock": {\n              "challenges": [\n                {"locked": {}},\n                {"height": {"chain": "header", "min": 2, "max": 15}},\n                {"tick": {"min": 2, "max": 15}}\n              ], \n              "threshold": 1\n            },\n            "responses": [\n              {"locked": {}},\n              {"height": {"transactionBind": "xxxx"}},\n              {"tick": {"transactionBind": "xxxx"}}\n            ]\n          },\n          "value": {"quantity": 1, "blobs": []},\n          "datum": {"references": [], "metadata": []},\n          "opts": []\n        }\n      ],\n      "outputs": [],\n      "datum": {\n        "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n        "references32": [],\n        "references64": [],\n        "metadata": []\n      }\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"test-vectors"},"Test Vectors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n{\n    "description": "Transaction Input Referencing a KnownIdentifier Unknown to the Wallet",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "fake commitment that does not exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"height": {"chain": "header", "min": 2, "max": 15}},\n                  {"tick": {"min": 2, "max": 15}},\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null, null, null, null, null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": {\n      "right": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "fake commitment that does not exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"height": {"chain": "header", "min": 2, "max": 15}},\n                  {"tick": {"min": 2, "max": 15}},\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"locked": {}},\n                {"height": {"transactionBind": "xxxx"}},\n                {"tick": {"transactionBind": "xxxx"}},\n                null,\n                null\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    }\n  },  \n  {\n    "description": "Transaction Input with Attestation Type Image32/64",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {"leaves": [], "threshold": 0},\n              "known": [],\n              "responses": []\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": "TBD"\n  },\n  {\n    "description": "Transaction Input with Attestation Type Commitment32/64",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {"root": "", "threshold": 0},\n              "known": [],\n              "responses": []\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": "TBD"\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate Whose Challenges and Responses Lengths Differ",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"tickRange": {"min": 2, "max": 10}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": {\n      "left": ["CredentiallerError.AttestationMalformed"]\n    }\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Available)",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null, null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": {\n      "right": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"signature": {"transactionBind": "xxxx", "witness": "witness_ijk"}},\n                {"digest": {"transactionBind": "xxxx", "preimage": "preimage_ijk"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    }\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate With Proof That Requires Secret Data (Unavailable)",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null, null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": {\n      "right": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"signature": {"routine": "ed25519", "vk": "verificationKey_ijk"}},\n                  {"digest": {"routine": "blake2b256", "digest": "digest_ijk"}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null, null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    }\n  },\n  {\n    "description": "Transaction Input with Attestation Type Predicate With Proof That Does Not Require Secret Data",\n    "inputs": {\n      "unprovenTx": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"height": {"chain": "header", "min": 2, "max": 15}},\n                  {"tick": {"min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [null, null, null]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    },\n    "outputs": {\n      "right": {\n        "inputs": [\n          {\n            "knownIdentifier": {\n              "network": 0,\n              "ledger": 0,\n              "index": 0,\n              "id": {\n                "tag": "iotx_32",\n                "evidence": "real commitment that does exist"\n              }\n            },\n            "attestation": {\n              "lock": {\n                "challenges": [\n                  {"locked": {}},\n                  {"height": {"chain": "header", "min": 2, "max": 15}},\n                  {"tick": {"min": 2, "max": 15}}\n                ], \n                "threshold": 1\n              },\n              "responses": [\n                {"locked": {}},\n                {"height": {"transactionBind": "xxxx"}},\n                {"tick": {"transactionBind": "xxxx"}}\n              ]\n            },\n            "value": {"quantity": 1, "blobs": []},\n            "datum": {"references": [], "metadata": []},\n            "opts": []\n          }\n        ],\n        "outputs": [],\n        "datum": {\n          "schedule": {"min": 1, "max": 100, "timestamp": 99999},\n          "references32": [],\n          "references64": [],\n          "metadata": []\n        }\n      }\n    }\n  }\n]\n')))}p.isMDXComponent=!0},9571:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/legend-88aae610a7c96ec47eea1f3aac5b1983.png"},585:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationCommitment-093407fa27b4e7c65f9f1394c7ee1580.png"},6644:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationCommitment_transaction-91b3354bfc8653d4ea382b4eca3372b2.png"},1121:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationImage-fdb81b8424ebe4906cd3e4157d8f4825.png"},9028:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationImage_transaction-5e304a803c36eb54b3a725e7cb25181f.png"},8858:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationMalformed-6fd8b93c89759019d06d8da2dd51a35b.png"},2697:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/attestationMalformed_transaction-d396aad7835ef70dca5d011689e85c1d.png"},1089:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/dataAvailable-5da1c5a77a0db3d8bb1cc79870fca14c.png"},5791:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/dataNeeded_transaction-d841bceab0f38004c0c5e5103a35ab23.png"},4446:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/dataUnneeded-3efa6290a6c2ccd5b0e7214e607906ef.png"},3705:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/dataUnneeded_transaction-a68ccbac0ae90be388f9c8e2bb38f3eb.png"},2854:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/dataUnvailable-2ffcaf097fc2026719c2f3e9d814a17e.png"},5438:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/knownIdentifierUnknown-5b4e285a0cbd3d98d64aa28b42ccd5d7.png"},8736:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/knownIdentifierUnknown_transaction-f01593f4079f0b5e87a3c89bb83315a8.png"},3520:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/prove.drawio-776499ebfc97411aaadf223c743be844.png"},4712:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/proveInput.drawio-4e71b3fbac7323c974491e46968c7227.png"},3934:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/transaction-f4b91916083f0053601224eae16edff8.png"}}]);