"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[623],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const s={},i="Assumptions",o={unversionedId:"Overview/Assumptions",id:"Overview/Assumptions",title:"Assumptions",description:"This specification contains descriptions of the SDK interfaces. The descriptions are documented in a way that assumes",source:"@site/docs/Overview/Assumptions.md",sourceDirName:"Overview",slug:"/Overview/Assumptions",permalink:"/sdk-spec/docs/Overview/Assumptions",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Overview/Assumptions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/sdk-spec/docs/Overview/"},next:{title:"Hiding Nondeterminism and Organizing TxO State",permalink:"/sdk-spec/docs/Overview/HidingNonDeterminism"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"assumptions"},"Assumptions"),(0,r.kt)("p",null,"This specification contains descriptions of the SDK interfaces. The descriptions are documented in a way that assumes\nall languages used for implementations have a common set of features related to supporting the object-oriented paradigm:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Classes that can be used to create instances or objects. The objects have functions/methods and attributes. We do not\nassume that there is inheritance between classes."),(0,r.kt)("li",{parentName:"ul"},"Some implementation languages allow functions or methods to throw exceptions or panic when something unexpected\nhappens that is outside of the assumptions, requirements and behaviors documented here. This way of dealing with\nunexpected behavior is not be documented as part of any interface documented here. If implementations need to respond\nto an unexpected situation in this way, the implementation must document this behavior."),(0,r.kt)("li",{parentName:"ul"},"Interfaces describe a set of functions/methods provided by classes that implement the interfaces. We do not assume\nthat interfaces can inherit from interfaces."),(0,r.kt)("li",{parentName:"ul"},"We assume that classes can implement multiple interfaces."),(0,r.kt)("li",{parentName:"ul"},"The type of a parameter or return value can be a class, interface or primitive type."),(0,r.kt)("li",{parentName:"ul"},"We do not assume that classes can have more than one public constructor."),(0,r.kt)("li",{parentName:"ul"},"We assume that there are static functions/methods that can be associated with a class that can be called without\nhaving an instance of the class. These will be primarily used to create instances of their associated class or to set\nglobal parameters."),(0,r.kt)("li",{parentName:"ul"},"We assume that the language is either dynamically typed or statically typed with classes and interfaces can be\ngeneric/parametric. Generic/parametric classes and interfaces have type parameters used to specify the types of method\nparameters and return values."),(0,r.kt)("li",{parentName:"ul"},"We assume that the language provides a future or promise type that encapsulates values that are computed\nasynchronously. The minimal functionality assumed for the future or promise type is that it has methods to query\nwhether the computation has finished and a blocking operation to get the value of the computation.",(0,r.kt)("br",{parentName:"li"}),"In the rest of this document, we consider \u201cfuture\u201d and \u201cpromise\u201d to be synonyms and use \u201cfuture\u201d to refer to both."),(0,r.kt)("li",{parentName:"ul"},"We assume that methods/functions can have parameters whose values are methods/functions (first-class functions).")),(0,r.kt)("p",null,"Various data types are used to describe the parameters and return types of functions/methods. Most of these are defined\nin protobuf specifications from which language specific definitions are generated. A few collection types are not\ndefined in the protobuf specs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Option"),"\nThis is a very simple collection that either contains one element or None. It is used to indicate that a field or\nparameter may not have a value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Collection"),"\nThis is an unordered collection. It provides operations to iterate over its contents and to determine if an object\nis an element of the collection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List"),"\nThis is an ordered collection. It provides operations to iterate over its contents in their order and to determine if\nan object is an element of the collection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Stream"),"\nis a first-in-first-out data structure to which data can be asynchronously added and removed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Map"),"\nis a map/dictionary/associative array that associated keys with values.")),(0,r.kt)("p",null,"Most implementation types will have commonly used equivalents of these. The most appropriate equivalent should be used.\nBecause some implementation languages will provide collection types that take type parameters, the declarations include\ntype parameters for these."))}u.isMDXComponent=!0}}]);