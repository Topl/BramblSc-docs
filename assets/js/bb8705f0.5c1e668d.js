"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[407],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=a,m=p["".concat(o,".").concat(h)]||p[h]||c[h]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const i={},l="Brambl Query Functions",s={unversionedId:"Modules/Query/brambl_query",id:"Modules/Query/brambl_query",title:"Brambl Query Functions",description:"This document describes the interfaces that the Bramble SDK provides for querying Genus and bifrost nodes. The",source:"@site/docs/Modules/Query/brambl_query.md",sourceDirName:"Modules/Query",slug:"/Modules/Query/brambl_query",permalink:"/sdk-spec/docs/Modules/Query/brambl_query",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Query/brambl_query.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Native Transaction Builder",permalink:"/sdk-spec/docs/Modules/NativeTransactor/native_transaction_builder"},next:{title:"createOnChainTransactionIndex Tests",permalink:"/sdk-spec/docs/Modules/Query/brambl_query_tests/createOnChainTransactionIndex_test"}},o={},d=[{value:"Interface BifrostQuery",id:"interface-bifrostquery",level:2},{value:"Interface GenusBlockQuery",id:"interface-genusblockquery",level:2},{value:"getNodeConfig",id:"getnodeconfig",level:3},{value:"Signature(s)",id:"signatures",level:4},{value:"Description",id:"description",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Errors",id:"errors",level:4},{value:"Testing Procedure",id:"testing-procedure",level:4},{value:"Interface GenusBlockQuery",id:"interface-genusblockquery-1",level:2},{value:"getBlockById",id:"getblockbyid",level:3},{value:"Signature(s)",id:"signatures-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Errors",id:"errors-1",level:4},{value:"Testing Procedure",id:"testing-procedure-1",level:4},{value:"getBlockByHeight",id:"getblockbyheight",level:3},{value:"Signature(s)",id:"signatures-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Error",id:"error",level:4},{value:"Testing Procedure",id:"testing-procedure-2",level:4},{value:"getBlockByDepth",id:"getblockbydepth",level:3},{value:"Signature(s)",id:"signatures-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Error",id:"error-1",level:4},{value:"Testing Procedure",id:"testing-procedure-3",level:4},{value:"Interface GenusTransactionQuery",id:"interface-genustransactionquery",level:2},{value:"getTransactionById",id:"gettransactionbyid",level:3},{value:"Signature(s)",id:"signatures-4",level:4},{value:"Description",id:"description-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Errors",id:"errors-2",level:4},{value:"Testing Procedure",id:"testing-procedure-4",level:4},{value:"getTransactionByAddressStream",id:"gettransactionbyaddressstream",level:3},{value:"Signature(s)",id:"signatures-5",level:4},{value:"Description",id:"description-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Errors",id:"errors-3",level:4},{value:"Testing Procedure",id:"testing-procedure-5",level:4},{value:"getTxosByAddress",id:"gettxosbyaddress",level:3},{value:"Signature(s)",id:"signatures-6",level:4},{value:"Description",id:"description-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Errors",id:"errors-4",level:4},{value:"Testing Procedure",id:"testing-procedure-6",level:4},{value:"getTxosByAddressStream",id:"gettxosbyaddressstream",level:3},{value:"Signature(s)",id:"signatures-7",level:4},{value:"Description",id:"description-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Errors",id:"errors-5",level:4},{value:"Testing Procedure",id:"testing-procedure-7",level:4},{value:"getTxosByAssetLabel",id:"gettxosbyassetlabel",level:3},{value:"Signature(s)",id:"signatures-8",level:4},{value:"Description",id:"description-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Errors",id:"errors-6",level:4},{value:"Testing Procedure",id:"testing-procedure-8",level:4},{value:"createOnChainTransactionIndex",id:"createonchaintransactionindex",level:3},{value:"Signature(s)",id:"signatures-9",level:4},{value:"Description",id:"description-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Errors",id:"errors-7",level:4},{value:"Testing Procedure",id:"testing-procedure-9",level:4},{value:"getExistingTransactionIndexes",id:"getexistingtransactionindexes",level:3},{value:"Signature(s)",id:"signatures-10",level:4},{value:"Description",id:"description-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Errors",id:"errors-8",level:4},{value:"Testing Procedure",id:"testing-procedure-10",level:4},{value:"getIndexedTransactions",id:"getindexedtransactions",level:3},{value:"Signature(s)",id:"signatures-11",level:4},{value:"Description",id:"description-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Errors",id:"errors-9",level:4},{value:"Testing Procedure",id:"testing-procedure-11",level:4},{value:"dropIndex",id:"dropindex",level:3},{value:"Signature(s)",id:"signatures-12",level:4},{value:"Description",id:"description-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Errors",id:"errors-10",level:4},{value:"Testing Procedure",id:"testing-procedure-12",level:4}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"brambl-query-functions"},"Brambl Query Functions"),(0,a.kt)("p",null,"This document describes the interfaces that the Bramble SDK provides for querying Genus and bifrost nodes. The\ndescriptions are in a language-neutral form. To be lanuage-neutral,\nwe ",(0,a.kt)("a",{parentName:"p",href:"../../Overview/Assumptions"},"follow a set of assumptions"),"."),(0,a.kt)("p",null,"Three interfaces are documented on this page. They are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#interface-bifrostquery"},"BifrostQuery")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#interface-genusblockquery"},"GenusBlockQuery")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#interface-genustransactionquery"},"GenusTransactionQuery"))),(0,a.kt)("h2",{id:"interface-bifrostquery"},"Interface BifrostQuery"),(0,a.kt)("p",null,"The details of this interface are incomplete. They will be based on the bifrost_rpc specification."),(0,a.kt)("h2",{id:"interface-genusblockquery"},"Interface GenusBlockQuery"),(0,a.kt)("p",null,"This interface is used to query Genus to query a database get information extracted from the canonical blockchain."),(0,a.kt)("p",null,"Here is a summary of the methods/functions in this interface:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getnodeconfig"},"getNodeConfig")," \u2014 Get the configuration of the Bifrost node we are querying")),(0,a.kt)("h3",{id:"getnodeconfig"},"getNodeConfig"),(0,a.kt)("h4",{id:"signatures"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"getNodeConfig(timeoutMillis: uint64) returns co.topl.proto.models.node.NodeConfig\n")),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Retrieve the configuration of the Bifrost node we are connected to."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 2000 (2 seconds).")),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"co.topl.proto.models.node.NodeConfig")," that contains the node's configuration. The encapsulated configuration must\ninclude the configured slot duration."),(0,a.kt)("h4",{id:"errors"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function will produce include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Bifrost node"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Bifrost node"),(0,a.kt)("li",{parentName:"ul"},"The Bifrost node returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Bifrost node did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for ",(0,a.kt)("inlineCode",{parentName:"p"},"getNodeConfig")," is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getNodeConfig_test"},"described on a separate page")),(0,a.kt)("h2",{id:"interface-genusblockquery-1"},"Interface GenusBlockQuery"),(0,a.kt)("p",null,"This interface is used to query Genus to query a database get information extracted from the canonical blockchain."),(0,a.kt)("p",null,"There will be two implementation of this interface. One will use gRPC to access a stand-alone Genus server that runs\nindependently of Topl clients. The other is to access a Genus database that is embedded in the Topl client."),(0,a.kt)("p",null,"Here is a summary of the methods/functions in this interface:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getblockbydepth"},"getBlockByDepth")," \u2014 Get the block at a specified depth."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getblockbyheight"},"getBlockByHeight")," \u2014 get the block at a specified height."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getblockbyid"},"getBlockById")," \u2014 Get a block using its Id.")),(0,a.kt)("h3",{id:"getblockbyid"},"getBlockById"),(0,a.kt)("h4",{id:"signatures-1"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"getBlockById(id: models.TypedIdentifier, timeoutMillis: uint64, confidenceFactor: double)\n    returns co.topl.proto.models.block.FullBlock\n")),(0,a.kt)("h4",{id:"description-1"},"Description"),(0,a.kt)("p",null,"Retrieve a block with the specified ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," from the configured Genus service. This returns its result when there is a\nblock present in the genus service with the specified id and the confidence factor of the block is greater than or equal\nto the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," parameter."),(0,a.kt)("p",null,"This method/function will wait no longer than the specified number of milliseconds to return. When the method/function\nhas waited this amount of time and there is no result to be returned, the method produces an error."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," the ID of the block to find"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 2000 (2 seconds)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block is reorged. The default value is 0.9999999.")),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"co.topl.proto.models.block.FullBlock")," that contains the block header and block body for the with block with the\nspecified id."),(0,a.kt)("h4",{id:"errors-1"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function will produce include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure-1"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getBlockById is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getBlockById_test"},"described on a separate page")),(0,a.kt)("h3",{id:"getblockbyheight"},"getBlockByHeight"),(0,a.kt)("h4",{id:"signatures-2"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getBlockByHeight(height: int64, timeoutMillis: uint64, confidenceFactor: double)\n      returns co.topl.proto.models.block.FullBlock\n")),(0,a.kt)("h4",{id:"description-2"},"Description"),(0,a.kt)("p",null,"Retrieve the block at the specified height from the configured Genus service, where the height of the genesis block\nis 1. This returns a result when there is a block present in the genus service at the specified height and the\nconfidence factor of the block is greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," parameter."),(0,a.kt)("p",null,"This method/function will wait no longer than the specified number of milliseconds to return. When the method/function\nhas waited this amount of time and there is no result to be returned, the method produces an error."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"height")," the height of the block to get. The height of the genesis block 1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 2000 (2 seconds)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-2"},"Returns"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"co.topl.proto.models.block.FullBlock")," that contains the block header and block body for the block with at specified\nheight."),(0,a.kt)("h4",{id:"error"},"Error"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-2"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getBlockByHeight is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getBlockByHeight_test"},"described on a separate page")),(0,a.kt)("h3",{id:"getblockbydepth"},"getBlockByDepth"),(0,a.kt)("h4",{id:"signatures-3"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getBlockByDepth(depth: int64, timeoutMillis: uint64, confidenceFactor: double)\n      returns co.topl.proto.models.block.FullBlock\n")),(0,a.kt)("h4",{id:"description-3"},"Description"),(0,a.kt)("p",null,"Retrieve the block at the specified depth from the configured Genus service. This returns its result immediately.\nThe block at depth 1 is the highest block with a confidence factor that is greater than or\nequal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," parameter."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"depth")," the depth of the block to get. The block at depth 1 is the highest block with a confidence factor that is\ngreater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," parameter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-3"},"Returns"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"co.topl.proto.models.block.FullBlock")," that contains the block header and block body for the block with at specified\ndepth."),(0,a.kt)("h4",{id:"error-1"},"Error"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"There is no block at the requested depth or the block is not visible due to its confidence factor."),(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-3"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getBlockByDepth is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getBlockByDepth_test"},"described on a separate page")),(0,a.kt)("h2",{id:"interface-genustransactionquery"},"Interface GenusTransactionQuery"),(0,a.kt)("p",null,"This interface is used to query Genus to query a database get transaction information extracted from the canonical\nblockchain."),(0,a.kt)("p",null,"There will be two implementation of this interface. One will use gRPC to access a stand-alone Genus server that runs\nindependently of Topl clients. The other is to access a Genus database that is embedded in the Topl client."),(0,a.kt)("p",null,"Here is a summary of the methods/functions in this interface:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Transaction Queries by Blockchain Identifiers",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#gettransactionbyid"},"getTransactionById")," \u2014 Get a transaction using its ID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#gettransactionbyaddressstream"},"getTransactionByAddressStream")," \u2014 Get a stream of transactions connected to a\ngiven\naddress")))),(0,a.kt)("p",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Transaction Queries Using Application Defined Indexes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#createonchaintransactionindex"},"createOnChainTransactionIndex")," \u2014 Create transaction index"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getexistingtransactionindexes"},"getExistingTransactionIndexes")," \u2014 Get existing transaction indexes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#getindexedtransactions"},"getIndexedTransactions")," \u2014 Get transactions using an index"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#dropindex"},"dropIndex")," \u2014 drop a named index")))),(0,a.kt)("p",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TxO Queries",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#gettxosbyaddress"},"getTxosByAddress")," \u2014 Get TxOs that are currently associated with specified addresses"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#gettxosbyaddressstream"},"getTxosByAddressStream")," \u2014 Get TxOs that are associated with specified addresses now and\nin the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#gettxosbyassetlabel"},"getTxosByAssetLabel")," \u2014 Tet TxOs having a specified address label.")))),(0,a.kt)("h3",{id:"gettransactionbyid"},"getTransactionById"),(0,a.kt)("h4",{id:"signatures-4"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getTransactionById(id: models.TransactionId, timeoutMillis: uint64, confidenceFactor: double)\n      returns TransactionReceipt\n")),(0,a.kt)("h4",{id:"description-4"},"Description"),(0,a.kt)("p",null,"Retrieve a transaction with the specified ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," from the configured Genus service. This returns its result when there is\na transaction present in the genus service with the specified id and the confidence factor of the block that contains\nthe transaction is greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," parameter."),(0,a.kt)("p",null,"This method/function will wait no longer than the specified number of milliseconds to return. When the method/function\nhas waited this amount of time and there is no result to be returned, the method/function produces an error."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," the ID of the transaction to find."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 2000 (2 seconds)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-4"},"Returns"),(0,a.kt)("p",null,"A transaction receipt that includes the specified transaction and genus-supplied metadata."),(0,a.kt)("h4",{id:"errors-2"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure-4"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getTransactionById\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getTransactionById_test"},"described on a separate page")),(0,a.kt)("h3",{id:"gettransactionbyaddressstream"},"getTransactionByAddressStream"),(0,a.kt)("h4",{id:"signatures-5"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getTransactionsByAddressStream(addresses: Collection[Address],\n                                 timeoutMillis: uint64,\n                                 confidenceFactor: double) \n      returns Stream[TransactionReceipt]\n")),(0,a.kt)("h4",{id:"description-5"},"Description"),(0,a.kt)("p",null,"Retrieve transactions that have an input or output associated with any of the specified addresses from the configured\nGenus service. This returns a stream of existing and future transactions from the genus service with the specified id\nthat are in a block with confidence factor greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," parameter."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addresses")," The addresses to search for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-5"},"Returns"),(0,a.kt)("p",null,"A stream of transaction receipts that includes the specified transactions with genus-supplied metadata."),(0,a.kt)("h4",{id:"errors-3"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-5"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getTransactionByAddressStream\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getTransactionByAddressStream_test"},"described on a separate page")),(0,a.kt)("h3",{id:"gettxosbyaddress"},"getTxosByAddress"),(0,a.kt)("h4",{id:"signatures-6"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getTxosByAddress(addresses: List[Address], timeoutMillis: uint64, confidenceFactor: double)\n      returns Map[String, Collection[Txo]]\n")),(0,a.kt)("h4",{id:"description-6"},"Description"),(0,a.kt)("p",null,"Retrieve from the configured Genus service TxOs (spent or unspent) that are associated with any of the specified\naddresses and are in a block whose confidence factor is greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor"),"\nparameter. This returns immediately."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addresses")," The addresses to search for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-6"},"Returns"),(0,a.kt)("p",null,"A Map whose keys addresses as base58 encoded strings and whose values are a collection of TxOs associated with their key\naddress."),(0,a.kt)("h4",{id:"errors-4"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-6"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getTxosByAddress is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getTxosByAddress_test"},"described on a separate page")),(0,a.kt)("h3",{id:"gettxosbyaddressstream"},"getTxosByAddressStream"),(0,a.kt)("h4",{id:"signatures-7"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getTxosByAddressStream(addresses: List[Address], timeoutMillis: uint64, confidenceFactor: double) \n           returns Stream[Map[String, Collection[Txo]]]\n")),(0,a.kt)("h4",{id:"description-7"},"Description"),(0,a.kt)("p",null,"Retrieve from the configured Genus service TxOs (spent or unspent) that are associated with any of the specified\naddresses and are in a block whose confidence factor is greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor"),"\nparameter. As new TxOs are added or UTxOs are spent that match the request, additional results are returned."),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addresses")," The addresses to search for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-7"},"Returns"),(0,a.kt)("p",null,"A stream of Maps whose keys addresses as base58 encoded strings and whose values are a collection of TxOs."),(0,a.kt)("h4",{id:"errors-5"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-7"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getTxosByAddressStream\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getTxosByAddressStream_test"},"described on a separate page")),(0,a.kt)("h3",{id:"gettxosbyassetlabel"},"getTxosByAssetLabel"),(0,a.kt)("h4",{id:"signatures-8"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getTxosByAssetLabel(assetLabel: String, timeoutMillis: uint64, confidenceFactor: double)\n      returns Stream[Txo]\n")),(0,a.kt)("h4",{id:"description-8"},"Description"),(0,a.kt)("p",null,"Retrieve from the configured Genus service TxOs (spent or unspent) that contain the type of asset specified by the\nasset label and are in a block whose confidence factor is greater than or equal to the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor"),"\nparameter. As new TxOs are added or UTxOs are spent that match the request, additional results are returned."),(0,a.kt)("h4",{id:"parameters-8"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"assetLabel")," Is a string that identifies the type of asset in a TxO. The format of the assetLabel depends on the type\nof box that is in the TxO:"),(0,a.kt)("table",{parentName:"li"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Box Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Format"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Empty"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"EMPTY"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Lvl"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"LVL"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Topl"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"TOPL"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AssetV1"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"version"),"|",(0,a.kt)("em",{parentName:"td"},"address"),(0,a.kt)("br",null),"where ",(0,a.kt)("em",{parentName:"td"},"version")," is the hex value of the version byte and ",(0,a.kt)("em",{parentName:"td"},"address")," is the base58 encoded minting address.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AssetV2"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"group"),":",(0,a.kt)("em",{parentName:"td"},"series"),(0,a.kt)("br",null),"where ",(0,a.kt)("em",{parentName:"td"},"group")," is the base58 encoded ID of the group constructor and ",(0,a.kt)("em",{parentName:"td"},"series")," is the base58 encoded id of the series constructor."))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"p"},"(optional)"),"  The maximum number of milliseconds to wait. The default value is 1000 (1 second).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"p"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999."))),(0,a.kt)("h4",{id:"returns-8"},"Returns"),(0,a.kt)("p",null,"A stream of TxOs."),(0,a.kt)("h4",{id:"errors-6"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-8"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for getTxosByAssetLabel\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getTxosByAssetLabel_test"},"described on a separate page")),(0,a.kt)("h3",{id:"createonchaintransactionindex"},"createOnChainTransactionIndex"),(0,a.kt)("h4",{id:"signatures-9"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  createOnChainTransactionIndex(indexSpec: IndexSpec, populate: boolean, timeoutMillis: uint64)\n      returns boolean\n")),(0,a.kt)("h4",{id:"description-9"},"Description"),(0,a.kt)("p",null,"Create an index on transactions in the Genus database. The index will allow transactions to be found quickly based on\nthe contents of their data field."),(0,a.kt)("p",null,"This returns as soon as the index is created. After the index is created, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"populate")," parameter is true then Genus\nwill asynchronously populate the index."),(0,a.kt)("h4",{id:"parameters-9"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"indexSpec")," Is an object that describes the index to be created. It includes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"name \u2014 The name of the index"),(0,a.kt)("li",{parentName:"ul"},"indexFieldSpec \u2014 describes how to parse the transaction date to find the fields that are the index values.\nJSON and CSV are supported for this. A JSON indexFieldSpec will cause transactions with data that is not a valid\nJSON object containing the needed fields to be excluded from the index.",(0,a.kt)("br",null),"\nIf no value is provided, then the index will include every transaction to be included in the index using the full\ncontents of their data fields as index keys."),(0,a.kt)("li",{parentName:"ul"},"indexFilter \u2014 An optional regular expression to filter which transactions are included in the created index. If\nthis is specified then only transactions whose data matches the regular expression are included in the index.\nIf no indexFilter is specified, then all transactions are included in the index if the indexFieldSpec value allows\nit."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"populate")," If this is true then existing transactions in the database are scanned to populate the index; otherwise the\nindex is left empty until a new transaction that passes the filter gets into the index."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second).")),(0,a.kt)("h4",{id:"returns-9"},"Returns"),(0,a.kt)("p",null,"True if the index was created; False if the index already existed."),(0,a.kt)("h4",{id:"errors-7"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure-9"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for createOnChainTransactionIndex\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/createOnChainTransactionIndex_test"},"described on a separate page")),(0,a.kt)("h3",{id:"getexistingtransactionindexes"},"getExistingTransactionIndexes"),(0,a.kt)("h4",{id:"signatures-10"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getExistingTransactionIndexes(timeoutMillis: uint64) returns Collection[IndexSpec]\n")),(0,a.kt)("h4",{id:"description-10"},"Description"),(0,a.kt)("p",null,"Return a collection of ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," objects, where each ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," object corresponds to an index in the Genus database.\nThe content of each ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," object is the same as the ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec ")," object used to create the index."),(0,a.kt)("h4",{id:"parameters-10"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second).")),(0,a.kt)("h4",{id:"returns-10"},"Returns"),(0,a.kt)("p",null,"a collection of ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," objects, where each ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," object corresponds to an index in the Genus database.\nThe content of each ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec")," object is the same as the ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexSpec ")," object used to create the index."),(0,a.kt)("h4",{id:"errors-8"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure-10"},"Testing Procedure"),(0,a.kt)("p",null,"Happy path testing of ",(0,a.kt)("inlineCode",{parentName:"p"},"getExistingTransactionIndexes")," is done as part of testing ",(0,a.kt)("inlineCode",{parentName:"p"},"createOnChainTransactionIndex"),"."),(0,a.kt)("p",null,"The testing procedure for ",(0,a.kt)("inlineCode",{parentName:"p"},"getExistingTransactionIndexes"),"\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getExistingTransactionIndexes_test"},"described on a separate page")),(0,a.kt)("h3",{id:"getindexedtransactions"},"getIndexedTransactions"),(0,a.kt)("h4",{id:"signatures-11"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  getIndexedTransactions(indexName: String, keys: List[IndexMatchValue], \n                         maxResults: int32, skipResults: uint64, timeoutMillis: uint64,\n                         confidenceFactor: double)\n      returns Stream[TransactionReceipt]\n")),(0,a.kt)("h4",{id:"description-11"},"Description"),(0,a.kt)("p",null,"Retrieve transactions that are included in the named index. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," parameter is supplied, then only transactions\nwhose index records match the specified key values are included in the result."),(0,a.kt)("h4",{id:"parameters-11"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"indexSpec")," Is an object that describes the index to be created. It includes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keys")," A list of values to match against field in records of the named index. The default value for this is an empty\nlist, which allows all transactions covered by the index to be returned."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxResults")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is the maximum number of transactions to be returned. This parameter can be used with the\n",(0,a.kt)("inlineCode",{parentName:"li"},"skipResults")," parameter to page forward or backward through the transactions.",(0,a.kt)("br",null),"\nThe default value for this parameter is 2",(0,a.kt)("sup",null,"31"),"-1."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"skipResults")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is the number of transactions to be skipped. This parameter can be used with the\n",(0,a.kt)("inlineCode",{parentName:"li"},"maxResults")," parameter\nto page forward or backward through the transactions.",(0,a.kt)("br",null),"\nThe default value for this parameter is 0."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)"),"  The maximum number of milliseconds to wait. The default value is 1000 (1 second)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," is 1 minus the probability that a block will be reorged. The default value is\n0.9999999.")),(0,a.kt)("h4",{id:"returns-11"},"Returns"),(0,a.kt)("p",null,"A stream of transactions that were found through the index."),(0,a.kt)("h4",{id:"errors-9"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"confidenceFactor")," is not >= 0.0 and <= 1.0")),(0,a.kt)("h4",{id:"testing-procedure-11"},"Testing Procedure"),(0,a.kt)("p",null,"Some happy path cases are covered by tests for other functions."),(0,a.kt)("p",null,"The testing procedure for ",(0,a.kt)("inlineCode",{parentName:"p"},"getIndexedTransactions"),"\nis ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/getIndexedTransactions_test"},"described on a separate page")),(0,a.kt)("h3",{id:"dropindex"},"dropIndex"),(0,a.kt)("h4",{id:"signatures-12"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  dropIndex(indexName: String, timeoutMillis: uint64) returns boolean\n")),(0,a.kt)("h4",{id:"description-12"},"Description"),(0,a.kt)("p",null,"Delete an index from the Genus database."),(0,a.kt)("h4",{id:"parameters-12"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"indexName")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The name of the index to be deleted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeoutMillis")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The maximum number of milliseconds to wait. The default value is 1000 (1 second).")),(0,a.kt)("h4",{id:"returns-12"},"Returns"),(0,a.kt)("p",null,"True if the index was deleted otherwise false if the index did not exist."),(0,a.kt)("h4",{id:"errors-10"},"Errors"),(0,a.kt)("p",null,"The errors that the method/function produces include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No properly configured Genus service"),(0,a.kt)("li",{parentName:"ul"},"Unable to send request to Genus service"),(0,a.kt)("li",{parentName:"ul"},"The Genus service returned an error"),(0,a.kt)("li",{parentName:"ul"},"The Genus service did not return a result before the timeout happened")),(0,a.kt)("h4",{id:"testing-procedure-12"},"Testing Procedure"),(0,a.kt)("p",null,"The testing procedure for ",(0,a.kt)("inlineCode",{parentName:"p"},"dropIndex")," is ",(0,a.kt)("a",{parentName:"p",href:"brambl_query_tests/dropIndex_test"},"described on a separate page")))}c.isMDXComponent=!0}}]);