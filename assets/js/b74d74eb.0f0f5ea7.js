"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},l="Schedule Tests",s={unversionedId:"Modules/NativeTransactor/NativeTransactor Tests/schedule_test",id:"Modules/NativeTransactor/NativeTransactor Tests/schedule_test",title:"Schedule Tests",description:"This page describes the tests that must be done to verify the behavior of methods/functions that convert between slot",source:"@site/docs/Modules/NativeTransactor/NativeTransactor Tests/schedule_test.md",sourceDirName:"Modules/NativeTransactor/NativeTransactor Tests",slug:"/Modules/NativeTransactor/NativeTransactor Tests/schedule_test",permalink:"/sdk-spec/docs/Modules/NativeTransactor/NativeTransactor Tests/schedule_test",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/NativeTransactor/NativeTransactor Tests/schedule_test.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Native Transaction Builder",permalink:"/sdk-spec/docs/Modules/NativeTransactor/"},next:{title:"Query",permalink:"/sdk-spec/docs/Modules/Query/"}},o={},c=[{value:"Happy Path",id:"happy-path",level:4},{value:"Max less than Min",id:"max-less-than-min",level:4}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"schedule-tests"},"Schedule Tests"),(0,r.kt)("p",null,"This page describes the tests that must be done to verify the behavior of methods/functions that convert between slot\nnumbers and Unix timestamps."),(0,r.kt)("p",null,"The following testing scenarios are required:"),(0,r.kt)("h4",{id:"happy-path"},"Happy Path"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Given")," ",(0,r.kt)("inlineCode",{parentName:"li"},"minValidSlot")," is an arbitrary `uint64"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"And")," ",(0,r.kt)("inlineCode",{parentName:"li"},"maxValidSlot")," is an arbitrary ",(0,r.kt)("inlineCode",{parentName:"li"},"uint64")," greater than ",(0,r.kt)("inlineCode",{parentName:"li"},"minValidSlot")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Schedule(minValidSlot: uint64, maxValidSlot: uint64, timestamp: int64)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Then"),"\nshould successfully construct a Schedule object with the given values for ",(0,r.kt)("inlineCode",{parentName:"li"},"minValidSlot")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Schedule(minValidSlot: uint64, maxValidSlot: uint64, timestamp: int64).signableBytes()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Then"))),(0,r.kt)("h4",{id:"max-less-than-min"},"Max less than Min"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Given")," ",(0,r.kt)("inlineCode",{parentName:"li"},"minValidSlot")," is an arbitrary ",(0,r.kt)("inlineCode",{parentName:"li"},"uint64")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"And")," ",(0,r.kt)("inlineCode",{parentName:"li"},"maxValidSlot")," is an arbitrary ",(0,r.kt)("inlineCode",{parentName:"li"},"uint64")," less than ",(0,r.kt)("inlineCode",{parentName:"li"},"minValidSlot")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Schedule(minValidSlot: uint64, maxValidSlot: uint64, timestamp: int64)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Then"),"\nshould indicate an error caused by max less than min")))}u.isMDXComponent=!0}}]);