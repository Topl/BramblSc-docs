"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[7424],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,g=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return t?r.createElement(g,o(o({ref:n},m),{},{components:t})):r.createElement(g,o({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(7462),i=(t(7294),t(3905));const a={},o="Generation",l={unversionedId:"Modules/Crypto/Generation/Generation",id:"Modules/Crypto/Generation/Generation",title:"Generation",description:"This submodule of crypto is responsible for generating key pairs for wallets. There is a nested submodule named",source:"@site/docs/Modules/Crypto/Generation/Generation.md",sourceDirName:"Modules/Crypto/Generation",slug:"/Modules/Crypto/Generation/",permalink:"/sdk-spec/docs/Modules/Crypto/Generation/",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Crypto/Generation/Generation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Crypto",permalink:"/sdk-spec/docs/Modules/Crypto/"},next:{title:"Mnemonic",permalink:"/sdk-spec/docs/Modules/Crypto/Generation/Mnemonic/"}},s={},u=[{value:"Interface KeyInitializer",id:"interface-keyinitializer",level:2},{value:"method fromMnemonicString",id:"method-frommnemonicstring",level:3},{value:"Signature(s)",id:"signatures",level:4},{value:"Description",id:"description",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Errors",id:"errors",level:4},{value:"class Ed25519Initializer",id:"class-ed25519initializer",level:2},{value:"method fromMnemonicString",id:"method-frommnemonicstring-1",level:3},{value:"Signature(s)",id:"signatures-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Errors",id:"errors-1",level:4}],m={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generation"},"Generation"),(0,i.kt)("p",null,"This submodule of crypto is responsible for generating key pairs for wallets. There is a nested submodule named\n",(0,i.kt)("a",{parentName:"p",href:"Generation/Mnemonic"},(0,i.kt)("inlineCode",{parentName:"a"},"mnemonic"))," that is responsible for generating and consuming mnemonic phrases."),(0,i.kt)("h2",{id:"interface-keyinitializer"},"Interface KeyInitializer"),(0,i.kt)("p",null,"Implementations of this interface are responsible for creating a key pair from an entropy value. This can be used as the\nmain key pair that a wallet uses to derive child key pairs."),(0,i.kt)("h3",{id:"method-frommnemonicstring"},"method fromMnemonicString"),(0,i.kt)("h4",{id:"signatures"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fromMnemonicString(mnemonicString: String, language: Language, password: Option[String]) returns ByteVector\n")),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Compute a secret signing key from a mnemonic string. Note that this skips the step of generating a seed value and then\nusing the seed value to compute the secret signing key."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mnemonicString")," \u2014 The mnemonic string to use to compute the secret signing key."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"language")," \u2014 The language of the mnemonic string. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"Language.english()"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2014 The password to use to compute the secret signing key. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),".")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,"The secret signing key. This is assumed to be a type of secret signing key from which the public verification key can be\nderived."),(0,i.kt)("h4",{id:"errors"},"Errors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Signal an error if the file identified by the ",(0,i.kt)("inlineCode",{parentName:"li"},"filePath()")," method of the given ",(0,i.kt)("inlineCode",{parentName:"li"},"Language")," instance cannot be read."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the SHA-256 hash of its contents is not what is expected."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the mnemonic string is not a valid length."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the mnemonic string cannot be decoded.")),(0,i.kt)("h2",{id:"class-ed25519initializer"},"class Ed25519Initializer"),(0,i.kt)("p",null,"Implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"KeyInitializer")," interface for the Ed25519 signing scheme."),(0,i.kt)("h3",{id:"method-frommnemonicstring-1"},"method fromMnemonicString"),(0,i.kt)("h4",{id:"signatures-1"},"Signature(s)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fromMnemonicString(mnemonicString: String, language: Language, password: Option[String]) returns KeyPair\n")),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Compute a secret signing key from a mnemonic string."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mnemonicString")," \u2014 The mnemonic string to use to compute the secret signing key."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"language")," \u2014 The language of the mnemonic string. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"Language.english()"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2014 The password to use to compute the secret signing key. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),".")),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"The secret Ed25519 signing key."),(0,i.kt)("h4",{id:"errors-1"},"Errors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Signal an error if the file identified by the ",(0,i.kt)("inlineCode",{parentName:"li"},"filePath()")," method of the given ",(0,i.kt)("inlineCode",{parentName:"li"},"Language")," instance cannot be read."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the SHA-256 hash of its contents is not what is expected."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the mnemonic string is not a valid length."),(0,i.kt)("li",{parentName:"ul"},"Signal an error if the mnemonic string cannot be decoded.")))}c.isMDXComponent=!0}}]);