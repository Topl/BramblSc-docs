"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[345],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=a,m=u["".concat(i,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8951:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},l="Credentials",s={unversionedId:"Modules/Wallet/Credentialler/Credentialler",id:"Modules/Wallet/Credentialler/Credentialler",title:"Credentials",description:"The Credentialler is a local prover that is able to create the proofs needed for a transaction. It's purpose is to take an unproven transaction (see Transaction Builder) and generate a proven transaction. To achieve this, the Credentialler has access to all the secrets (keys) and UTxO states within a wallet using the Interface module and creates proofs using the Quivr module.",source:"@site/docs/Modules/Wallet/Credentialler/Credentialler.md",sourceDirName:"Modules/Wallet/Credentialler",slug:"/Modules/Wallet/Credentialler/",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Wallet/Credentialler/Credentialler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Slot \u21d4 Timestamp Conversions",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test"},next:{title:"Prove an Unproven Transaction",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/Prove"}},i={},c=[],p={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"credentials"},"Credentials"),(0,a.kt)("p",null,"The Credentialler is a local prover that is able to create the proofs needed for a transaction. It's purpose is to take an unproven transaction (see ",(0,a.kt)("a",{parentName:"p",href:"/sdk-spec/docs/Modules/NativeTransactor/"},"Transaction Builder"),") and generate a proven transaction. To achieve this, the Credentialler has access to all the secrets (keys) and UTxO states within a wallet using the ",(0,a.kt)("a",{parentName:"p",href:"#"},"Interface module")," and creates proofs using the ",(0,a.kt)("a",{parentName:"p",href:"#"},"Quivr module"),"."),(0,a.kt)("p",null,"The Credentialler can also validate if a given IoTransaction is satisfactorily proven."))}d.isMDXComponent=!0}}]);