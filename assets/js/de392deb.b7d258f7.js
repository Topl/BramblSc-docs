"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[942],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>v});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(r),v=a,f=u["".concat(d,".").concat(v)]||u[v]||p[v]||o;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9332:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},l="Prove Then Validate a Transaction",i={unversionedId:"Modules/Wallet/Credentialler/ProveAndValidate",id:"Modules/Wallet/Credentialler/ProveAndValidate",title:"Prove Then Validate a Transaction",description:"TODO: Link to models",source:"@site/docs/Modules/Wallet/Credentialler/ProveAndValidate.md",sourceDirName:"Modules/Wallet/Credentialler",slug:"/Modules/Wallet/Credentialler/ProveAndValidate",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/ProveAndValidate",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Wallet/Credentialler/ProveAndValidate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Prove an Unproven Transaction",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/Prove"},next:{title:"Validate a Proven Transaction",permalink:"/sdk-spec/docs/Modules/Wallet/Credentialler/Validate"}},d={},c=[{value:"Signature(s)",id:"signatures",level:2},{value:"Description",id:"description",level:2},{value:"Testing Procedure",id:"testing-procedure",level:2}],s={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prove-then-validate-a-transaction"},"Prove Then Validate a Transaction"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"TODO: Link to models")),(0,a.kt)("h2",{id:"signatures"},"Signature(s)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"proveAndValidate(unprovenTx: IoTransaction, ctx: DynamicContext): Either[List[CredentiallerError], IoTransaction]\n")),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"This function is a combination of the aforementioned ",(0,a.kt)("a",{parentName:"p",href:"#prove-an-unproven-transaction"},(0,a.kt)("inlineCode",{parentName:"a"},"prove"))," and ",(0,a.kt)("a",{parentName:"p",href:"#validate-a-proven-transaction"},(0,a.kt)("inlineCode",{parentName:"a"},"validate"))," functions."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"TODO: Add diagram")),(0,a.kt)("h2",{id:"testing-procedure"},"Testing Procedure"),(0,a.kt)("p",null,"The test cases and vectors for ",(0,a.kt)("inlineCode",{parentName:"p"},"proveAndValidate")," is a concatenation of the cases defined in ",(0,a.kt)("a",{parentName:"p",href:"/sdk-spec/docs/Modules/Wallet/Credentialler/Prove#testing-procedure"},(0,a.kt)("inlineCode",{parentName:"a"},"prove"))," and ",(0,a.kt)("a",{parentName:"p",href:"/sdk-spec/docs/Modules/Wallet/Credentialler/Validate#testing-procedure"},(0,a.kt)("inlineCode",{parentName:"a"},"validate"))))}p.isMDXComponent=!0}}]);