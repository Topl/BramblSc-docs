"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[478],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(r),h=n,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||s;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<s;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6736:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const s={},i="Hash",o={unversionedId:"Modules/Crypto/Hash/Hash",id:"Modules/Crypto/Hash/Hash",title:"Hash",description:"This sub-module of crypto is responsible for hashing data. It contains the classes described below. It is likely that",source:"@site/docs/Modules/Crypto/Hash/Hash.md",sourceDirName:"Modules/Crypto/Hash",slug:"/Modules/Crypto/Hash/",permalink:"/sdk-spec/docs/Modules/Crypto/Hash/",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Crypto/Hash/Hash.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generation",permalink:"/sdk-spec/docs/Modules/Crypto/Generation"},next:{title:"Blake2b256 Tests",permalink:"/sdk-spec/docs/Modules/Crypto/Hash/Hash Tests/Blake2b256Tests"}},l={},p=[{value:"Class Blake2b256",id:"class-blake2b256",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Signature(s)",id:"signatures",level:4},{value:"Description",id:"description",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Errors",id:"errors",level:4},{value:"Testing Procedure",id:"testing-procedure",level:4},{value:"hash",id:"hash-1",level:3},{value:"Signature(s)",id:"signatures-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Errors",id:"errors-1",level:4},{value:"Testing Procedure",id:"testing-procedure-1",level:4},{value:"Class Blake2b512",id:"class-blake2b512",level:2},{value:"Constructor",id:"constructor-1",level:3},{value:"Signature(s)",id:"signatures-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Errors",id:"errors-2",level:4},{value:"Testing Procedure",id:"testing-procedure-2",level:4},{value:"hash",id:"hash-2",level:3},{value:"Signature(s)",id:"signatures-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Errors",id:"errors-3",level:4},{value:"Testing Procedure",id:"testing-procedure-3",level:4}],u={toc:p};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hash"},"Hash"),(0,n.kt)("p",null,"This sub-module of crypto is responsible for hashing data. It contains the classes described below. It is likely that\nthere will be more in the future."),(0,n.kt)("h2",{id:"class-blake2b256"},"Class Blake2b256"),(0,n.kt)("p",null,"This class is responsible for hashing data using the Blake2b-256 algorithm. It can be implemented as a thin wrapper\naround the Blake2b-256 algorithm provided by a library for the implementation language."),(0,n.kt)("h3",{id:"constructor"},"Constructor"),(0,n.kt)("h4",{id:"signatures"},"Signature(s)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Blake2b256()\n")),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"Construct a ",(0,n.kt)("inlineCode",{parentName:"p"},"Blake2b256")," object."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("em",{parentName:"em"},"None"))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,"The constructed ",(0,n.kt)("inlineCode",{parentName:"p"},"Blake2b256")," object."),(0,n.kt)("h4",{id:"errors"},"Errors"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("em",{parentName:"em"},"None"))),(0,n.kt)("h4",{id:"testing-procedure"},"Testing Procedure"),(0,n.kt)("p",null,"The test for the constructor is included in the test for the ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," method."),(0,n.kt)("h3",{id:"hash-1"},"hash"),(0,n.kt)("h4",{id:"signatures-1"},"Signature(s)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"hash(bytes: ByteVector) returns ByteVector\nhash(byteVectorList: List[ByteVector]) returns ByteVector\n")),(0,n.kt)("h4",{id:"description-1"},"Description"),(0,n.kt)("p",null,"Hash the given data using the Blake2b256 algorithm."),(0,n.kt)("p",null,"For implementation languages that support repeating parameters, the first signature should be used with a parameter that\nis allowed to occur one or more times. For implementation languages that do not support repeating parameters, the second\nsignature should be used with a parameter that is a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"ByteVector")," objects."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"bytes \u2014 The data to be hashed. This parameter may occur one or more times. This applies only to implementation\nlanguages that support repeating parameters."),(0,n.kt)("li",{parentName:"ul"},"byteVectorList \u2014 The data to be hashed. This parameter is a list of ",(0,n.kt)("inlineCode",{parentName:"li"},"ByteVector")," objects. This applies only to\nimplementation languages that do not support repeating parameters.")),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"ByteVector")," object containing the hash."),(0,n.kt)("h4",{id:"errors-1"},"Errors"),(0,n.kt)("p",null,"The errors that the method/function will produce include:"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"None")),(0,n.kt)("h4",{id:"testing-procedure-1"},"Testing Procedure"),(0,n.kt)("p",null,"The testing procedure for this method/functions\nis ",(0,n.kt)("a",{parentName:"p",href:"Hash/Hash%20Tests/Blake2b256Tests"},"described on a separate page"),"."),(0,n.kt)("h2",{id:"class-blake2b512"},"Class Blake2b512"),(0,n.kt)("p",null,"This class is responsible for hashing data using the Blake2b-512 algorithm. It can be implemented as a thin wrapper\naround the Blake2b-512 algorithm provided by a library for the implementation language."),(0,n.kt)("h3",{id:"constructor-1"},"Constructor"),(0,n.kt)("h4",{id:"signatures-2"},"Signature(s)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Blake2b512()\n")),(0,n.kt)("h4",{id:"description-2"},"Description"),(0,n.kt)("p",null,"Construct a ",(0,n.kt)("inlineCode",{parentName:"p"},"Blake2b512")," object."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("em",{parentName:"em"},"None"))),(0,n.kt)("h4",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,"The constructed ",(0,n.kt)("inlineCode",{parentName:"p"},"Blake2b512")," object."),(0,n.kt)("h4",{id:"errors-2"},"Errors"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("em",{parentName:"em"},"None"))),(0,n.kt)("h4",{id:"testing-procedure-2"},"Testing Procedure"),(0,n.kt)("p",null,"The test for the constructor is included in the test for the ",(0,n.kt)("inlineCode",{parentName:"p"},"hash")," method."),(0,n.kt)("h3",{id:"hash-2"},"hash"),(0,n.kt)("h4",{id:"signatures-3"},"Signature(s)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"hash(bytes: ByteVector) returns ByteVector\nhash(byteVectorList: List[ByteVector]) returns ByteVector\n")),(0,n.kt)("h4",{id:"description-3"},"Description"),(0,n.kt)("p",null,"Hash the given data using the Blake2b-512 algorithm."),(0,n.kt)("p",null,"For implementation languages that support repeating parameters, the first signature should be used with a parameter that\nis allowed to occur one or more times. For implementation languages that do not support repeating parameters, the second\nsignature should be used with a parameter that is a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"ByteVector")," objects."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"bytes \u2014 The data to be hashed. This parameter may occur one or more times. This applies only to implementation\nlanguages that support repeating parameters."),(0,n.kt)("li",{parentName:"ul"},"byteVectorList \u2014 The data to be hashed. This parameter is a list of ",(0,n.kt)("inlineCode",{parentName:"li"},"ByteVector")," objects. This applies only to\nimplementation languages that do not support repeating parameters.")),(0,n.kt)("h4",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"ByteVector")," object containing the hash."),(0,n.kt)("h4",{id:"errors-3"},"Errors"),(0,n.kt)("p",null,"The errors that the method/function will produce include:"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"None")),(0,n.kt)("h4",{id:"testing-procedure-3"},"Testing Procedure"),(0,n.kt)("p",null,"The testing procedure for this method/functions\nis ",(0,n.kt)("a",{parentName:"p",href:"Hash/Hash%20Tests/Blake2b512Tests"},"described on a separate page"),"."))}d.isMDXComponent=!0}}]);