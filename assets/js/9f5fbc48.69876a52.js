"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(k,o(o({ref:t},m),{},{components:n})):a.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},o="Slot \u21d4 Timestamp Conversions",l={unversionedId:"Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test",id:"Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test",title:"Slot \u21d4 Timestamp Conversions",description:"This page describes the tests that must be done to verify the behavior of methods/functions that convert between slot",source:"@site/docs/Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test.md",sourceDirName:"Modules/Util/NodeUtils/SlotUtil Tests",slug:"/Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Util/NodeUtils/SlotUtil Tests/slot_timestamp_conversion_test.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"getNodeConfig Tests",permalink:"/sdk-spec/docs/Modules/Util/NodeUtils/NodeCache Tests/getnodeconfig_test"},next:{title:"Overview",permalink:"/sdk-spec/docs/Overview/"}},s={},p=[{value:"Happy Path",id:"happy-path",level:5},{value:"Slot Number Too Big",id:"slot-number-too-big",level:4},{value:"Timestamp too Early",id:"timestamp-too-early",level:4}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"slot--timestamp-conversions"},"Slot \u21d4 Timestamp Conversions"),(0,i.kt)("p",null,"This page describes the tests that must be done to verify the behavior of methods/functions that convert between slot\nnumbers and Unix timestamps."),(0,i.kt)("p",null,"The following testing scenarios are required:"),(0,i.kt)("h5",{id:"happy-path"},"Happy Path"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"SlotUtil")," that is the value of the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"su")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," that ",(0,i.kt)("inlineCode",{parentName:"li"},"su")," was constructed with a mock instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeCache")," that is configured so that",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getNodeConfig")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeConfig")," object that specified a slot duration of 1000 milliseconds"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getGenesisBlock")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"FullBlock")," that contains a ",(0,i.kt)("inlineCode",{parentName:"li"},"BlockHeader")," that contains a timestamp with an arbitrary\npositive value ",(0,i.kt)("em",{parentName:"li"},"t",(0,i.kt)("sub",null,"0"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," ",(0,i.kt)("inlineCode",{parentName:"li"},"t1")," is an arbitrary Unix timestamp greater than ",(0,i.kt)("em",{parentName:"li"},"t",(0,i.kt)("sub",null,"0 and less than "))," 999,999,999,999."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"0 == su.timestampToSlotNumber(su.slotNumberToTimestamp(0))\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"t1 == su.slotNumberToTimestamp(su.timestampToSlotNumber(t1))\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"t1+99999 == su.slotNumberToTimestamp(su.timestampToSlotNumber(t1+99999))\n")))),(0,i.kt)("h4",{id:"slot-number-too-big"},"Slot Number Too Big"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"SlotUtil")," that is the value of the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"su")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," that ",(0,i.kt)("inlineCode",{parentName:"li"},"su")," was constructed with a mock instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeCache")," that is configured so that",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getNodeConfig")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeConfig")," object that specified a slot duration of 1000 milliseconds"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getGenesisBlock")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"FullBlock")," that contains a ",(0,i.kt)("inlineCode",{parentName:"li"},"BlockHeader")," that contains a timestamp with an arbitrary\npositive value"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," a variable named ",(0,i.kt)("inlineCode",{parentName:"li"},"slotNumber")," whose value is 4,611,686,018,427,387,904"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"su.slotNumberToTimestamp(slotNumber)\n")),"produces an error indicating that the slot number is too big to be represented as a Unix timestamp.")),(0,i.kt)("h4",{id:"timestamp-too-early"},"Timestamp too Early"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Given")," an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"SlotUtil")," that is the value of the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"su")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"And")," that ",(0,i.kt)("inlineCode",{parentName:"li"},"su")," was constructed with a mock instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeCache")," that is configured so that",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getNodeConfig")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeConfig")," object that specified a slot duration of 1000 milliseconds"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getGenesisBlock")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"FullBlock")," that contains a ",(0,i.kt)("inlineCode",{parentName:"li"},"BlockHeader")," that contains a timestamp with the value\n1668784352"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Then"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"TimestampToSlotNumber(1668784350)\n")),"produces an error indicating that the timestamp is before slot 0.")))}u.isMDXComponent=!0}}]);