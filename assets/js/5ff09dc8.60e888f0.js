"use strict";(self.webpackChunksdk_spec=self.webpackChunksdk_spec||[]).push([[1811],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>b});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(a),b=n,f=u["".concat(p,".").concat(b)]||u[b]||i[b]||s;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,l=new Array(s);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<s;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1611:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>i,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const s={},l="Blake2b512 Tests",o={unversionedId:"Modules/Crypto/Hash/Hash Tests/Blake2b512Tests",id:"Modules/Crypto/Hash/Hash Tests/Blake2b512Tests",title:"Blake2b512 Tests",description:"For testing the Blake2b512 class, the following happy path scenario is all that is required. Note that for",source:"@site/docs/Modules/Crypto/Hash/Hash Tests/Blake2b512Tests.md",sourceDirName:"Modules/Crypto/Hash/Hash Tests",slug:"/Modules/Crypto/Hash/Hash Tests/Blake2b512Tests",permalink:"/sdk-spec/docs/Modules/Crypto/Hash/Hash Tests/Blake2b512Tests",draft:!1,editUrl:"https://github.com/topl/sdk-spec/tree/main/packages/create-docusaurus/templates/shared/docs/Modules/Crypto/Hash/Hash Tests/Blake2b512Tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Blake2b256 Tests",permalink:"/sdk-spec/docs/Modules/Crypto/Hash/Hash Tests/Blake2b256Tests"},next:{title:"Signing",permalink:"/sdk-spec/docs/Modules/Crypto/Signing/"}},p={},c=[],d={toc:c};function i(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"blake2b512-tests"},"Blake2b512 Tests"),(0,n.kt)("p",null,"For testing the Blake2b512 class, the following happy path scenario is all that is required. Note that for\nimplementation languages that do not support repeating parameters, the argument should be wrapped in a ",(0,n.kt)("inlineCode",{parentName:"p"},"List"),"."),(0,n.kt)("p",null,"Given"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"b512 = Blake2b512()\n")),(0,n.kt)("p",null,"When"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'testHash = b512.hash("test")\n')),(0,n.kt)("p",null,"Then"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'testHash == "a71079d42853dea26e453004338670a53814b78137ffbed07603a41d76a483aa9bc33b582f77d30a65e6f29a896c0411f38312e1d66e0bf16386c86a89bea572"\n')),(0,n.kt)("p",null,"When"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'toplHash = b512.hash("topl")\n')),(0,n.kt)("p",null,"Then"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'toplHash == "87c15da49659c9ed4a1b594d7bd8a9e51cca576c4d68625787253474abaaec0d942d14cbe8570709b5872c66e01de9e0cc033f0875820497060554111add78be"\n')),(0,n.kt)("p",null,"When"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'scalaHash = b512.hash("scala")\n')),(0,n.kt)("p",null,"Then"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'scalaHash == "dc0907da1939f0fa4ff48353a43d2a3face5ced2626ee2a151909643ea3988800e3b66a262541ec23bc6f38f3cc3a3d6a6a2ffe3295b0aa7340e4b4d91c20dda"\n')),(0,n.kt)("p",null,"When"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'blankHash = b512.hash("")\n')),(0,n.kt)("p",null,"Then"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'blankHash == "786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce"\n')))}i.isMDXComponent=!0}}]);